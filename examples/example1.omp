; OM File Header - Saved 2009/06/15 12:02:38
; (6.0011 :patc (om-make-point 87 28) (om-make-point 436 172) (om-make-point 585 527) "No documentation " 183 0 nil "2009/06/15 12:02:38")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/SATIE.MID"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example1" (quote ((om-load-boxcomment "comment1" (om-make-point 131 32) (quote "A midi file.") "" (om-make-point 144 25) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 321 60) (quote "cross->chordseq translates this new sequence into a chord-seq.") "" (om-make-point 148 297) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 369 54) (quote "lzgenerate generates a new sequence from the LZ style analysis.") "" (om-make-point 159 230) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 256 44) (quote "lzify proceeds to the LZ style analysis.$") "" (om-make-point 154 164) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 348 58) (quote "midi->cross translates the midi file into a sequence of symbols.$") "" (om-make-point 210 101) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 30 366) (om-make-point 470 115) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7000) (6900) (7000) (6800 3800) (6500) (6700) (6800 6200 5600 5300) (7000) (6800) (4000 7100) (7100) (5500 5900 6400) (5500 5900 6400) (4000) (5500 5900 6400) (7100) (4500 6900) (5700 6100 6400) (5700 6400 6100) (4800 7600) (5500) (6000 6400) (6400 5500) (6000) (4300 7400) (7600) (6700) (5800 6200) (5700 6500 7200 6000) (7400) (7200) (7400) (4300 7000) (7200) (6700 6200 5800) (5700 6500 6900 6000) (7000) (6900) (7000) (6900) (7000) (6800 3800) (6500) (6700) (6800 5300 6200 5600) (7000) (7200) (7400) (7200))) :lonset (quote (0 169 351 509 729 1193 1825 2021 2149 2293 2519 3053 3355 4877 5499 6129 7716 7906 8699 10006 10796 11718 11770 13522 13575 14481 14970 15500 15559 16597 16929 17149 17502 17665 18019 18429 19479 19798 20003 20169 20347 20498 20735 21199 21831 22027 22204 22358 22520 22647 22774)) :ldur (quote ((169) (182) (158) (220) (464 464) (632) (196) (128 128 128 128) (144) (226) (534 534) (3076) (1522 1522 1522) (622 622 622) (630) (1587 1587 1587) (190) (793 2890) (1307 1307 1307) (790 790 790) (922 974) (52) (1752 1752) (959 53) (906) (489 489) (1627) (1097) (1038 1038) (332 332 332 332) (220) (353) (163) (354 354) (1460) (1050 1050 1050) (524 319 319 319) (205) (166) (178) (151) (237) (464 464) (632) (196) (177 620 620 620) (154) (162) (127) (151))) :lvel (quote ((47) (47) (56) (47) (62 46) (55) (64) (62 57 53 56) (64) (68) (64 56) (64) (42 48 23) (35 33 24) (55) (41 41 23) (56) (43 55) (19 20 6) (27 14 17) (42 34) (23) (21 13) (5 14) (6) (31 26) (47) (8) (11 23) (16 17 47 36) (45) (41) (66) (56 56) (63) (20 23 12) (16 18 20 24) (42) (37) (28) (42) (33) (62 46) (55) (64) (76 40 41 37) (63) (64) (79) (76))) :loffset (quote ((0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1 1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil) (nil) (nil) (nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil nil nil) (nil) (nil nil) (nil nil nil) (nil nil nil) (nil nil) (nil) (nil nil) (nil nil) (nil) (nil nil) (nil) (nil) (nil nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player scale microplay show-stems inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list (quote :midishare) nil nil (quote t) 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4 37/50 nil 1000 0 18350450 2621450 0 0)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A$$cross-alphabet sequence" "CROSS" nil))) (om-make-point 38 299) nil nil nil "cross->chordseq" 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0) (om-load-inputfun (quote input-funbox) "A list (optional)" "INCIPIT1" nil) (om-load-inputfun (quote input-funbox) "A list (optional)" "INCIPIT2" nil) (om-load-inputfunmenu1 (quote input-funmenu) "nil or a function name$$(optional)" "RECONSTR" nil (list (list "default function" nil) (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))) (om-load-inputfunmenu1 (quote input-funmenu) "A function name (optional)" "STRATEGY" (quote randomchoice) (list (list "random choice" (quote (quote randomchoice))) (list "duration : nearest last durations" (quote (quote duration_nearestlast))) (list "duration,etc. : nearest last durations" (quote (quote duration_nearestlast_velocity))))) (om-load-inputfun (quote input-funbox) "A function name (optional)" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "A function name (optional)" "EQUIV1" (quote equal)))) (om-make-point 38 235) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of$$anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 5) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))) (list "all_nothing" (quote (quote degenerated))))))) (om-make-point 55 155) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min$$arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An$$integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms)$$(optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "TOLTIME" 0))) (om-make-point 113 94) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 76 5) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "SATIE" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player scale microplay show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list (quote :midishare) nil nil (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0)) t nil nil nil))) (quote ((6 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (10 0 9 0 nil 0))) nil 6.0011))