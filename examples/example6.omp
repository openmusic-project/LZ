; OM File Header - Saved 2009/06/15 12:03:09
; (6.0011 :patc (om-make-point 158 84) (om-make-point 50 50) (om-make-point 661 578) "No documentation " 183 0 nil "2009/06/15 12:03:09")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/satie.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example6" (quote ((om-load-boxcomment "comment" (om-make-point 254 21) (quote "Displays all the pattern in the tree.") "" (om-make-point 353 472) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 235 23) (quote "Returns the number of nodes in the tree.") "" (om-make-point 353 363) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 254 21) (quote "Returns the size of the longest branch of the tree.") "" (om-make-point 353 414) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 259 35) (quote "Shows the name of the reconstr function in the Listener.") "" (om-make-point 354 301) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 180 28) (quote "Information about the pattern tree.") "" (om-make-point 217 175) nil (om-make-color 47/255 139/255 32/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 114 56) (quote "Information about the continuation tree.") "" (om-make-point 32 156) nil (om-make-color 47/255 139/255 32/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 259 35) (quote "Displays explicitly the tree in the Listener.") "" (om-make-point 354 244) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 344 69) (quote "If you need information about the result of the LZ analysis, here are some interesting tools.") "" (om-make-point 224 17) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "LZUNTREE" (quote lzuntree) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern$$tree or a LZ continuation tree" "TREE" nil))) (om-make-point 198 459) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZUNTREE" (quote lzuntree) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern tree or a LZ$$continuation tree" "TREE" nil))) (om-make-point 149 459) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZLENGTH" (quote lzlength) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern tree or a LZ continuation tree" "TREE" nil))) (om-make-point 235 401) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZLENGTH" (quote lzlength) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern$$tree or a LZ continuation tree" "TREE" nil))) (om-make-point 118 402) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZSIZE" (quote lzsize) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern tree or a LZ$$continuation tree" "TREE" nil))) (om-make-point 277 351) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZSIZE" (quote lzsize) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern tree or a LZ continuation tree" "TREE" nil))) (om-make-point 96 350) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZPRINTRECONSTR" (quote lzprintreconstr) (quote ((om-load-inputfun (quote input-funbox) "A$$LZ continuation tree" "TREE" nil))) (om-make-point 39 291) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZPRINT" (quote lzprint) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern tree or a LZ continuation tree" "TREE" nil))) (om-make-point 304 231) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZPRINT" (quote lzprint) (quote ((om-load-inputfun (quote input-funbox) "A LZ pattern tree$$or a LZ continuation tree" "TREE" nil))) (om-make-point 37 230) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote newpitch_duration_last_oldpitchvelocity_last) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 169 157) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a$$midi-info box" "MIDI-INFO" nil))) (om-make-point 160 93) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 167 13) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "satie" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 nil nil)) t nil nil nil))) (quote ((17 1 8 0 nil 0) (17 0 9 0 nil 0) (17 1 10 0 nil 0) (17 0 11 0 nil 0) (17 1 12 0 nil 0) (17 0 13 0 nil 0) (17 0 14 0 nil 0) (17 1 15 0 nil 0) (17 0 16 0 nil 0) (18 0 17 0 nil 0) (19 0 18 0 nil 0))) nil 6.0011))