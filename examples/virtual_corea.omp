; OM File Header - Saved 2009/06/15 12:03:24
; (6.0011 :patc (om-make-point 74 150) (om-make-point 50 50) (om-make-point 693 618) "No documentation " 183 0 nil "2009/06/15 12:03:24")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/CoreaImpro.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "virtual_corea" (quote ((om-load-boxinstance "CHORD-SEQ5" (let ((copy (make-instance (quote ominstance) :name "CHORD-SEQ5" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300) (6100 4600 6500) (6800) (5600) (6600) (5800 5400 6100 6300 4700) (7000 6500 5400 7500 5900 4900) (6500) (6500 5000 5700 6100) (6600) (4000) (6700 4700) (7100) (7400) (7600 4200 4900) (7300) (6900) (5800 4300 5000 7700) (7400) (7000) (6800) (6500) (6700) (6500) (6300) (6200) (6000) (5800) (5500) (5300) (5100) (5000) (4800) (4300) (3600) (4800) (6500 7200 6000 6700) (4800) (5500) (6000) (5500) (4800) (5500) (6300) (6700) (7000) (7400) (7700) (5100 6100) (6600 7000) (7300) (7700) (8000) (8000 7700) (7500 7300) (7000) (6600 6100) (5100) (7300 7000 4400 5900 6600 5400 5100) (6300) (8500) (8000) (6300 7500 7000) (7700 5900) (5400 7800) (7300 6800 5200 6300) (7100) (6400 5100 6100 7000) (7600) (8200) (8700) (8200) (7600) (7500) (7000) (6400) (6100) (5100))) :lonset (quote (0 100 315 455 555 755 1455 1775 2100 2250 2800 2930 3105 3275 3410 3580 3725 3900 4125 4305 4400 4480 4575 4650 4735 4835 4915 4985 5090 5155 5255 5335 5435 5510 5635 6025 6260 7600 7760 7935 8135 8260 8360 8425 8525 8585 8685 8760 9860 9985 10060 10135 10200 12085 12185 12250 12310 12435 14010 14065 14995 15875 16210 16460 16660 17010 18325 18495 19360 19535 19685 19835 19935 20085 20200 20300 20460 20585 153585)) :ldur (quote ((555) (455 355 455) (440) (100) (200) (700 700 700 700 700) (645 320 645 645 645 645) (325) (700 700 700 700) (550) (475) (345 345) (170) (135) (170 315 315) (145) (175) (500 405 405 225) (180) (95) (80) (95) (75) (85) (180) (80) (70) (105) (65) (100) (180) (100) (75) (125) (1965) (1575) (1340 1340 1340 1340) (335) (175) (325) (125) (1600) (1500) (1435) (1335) (1275) (1175) (1100) (2325 2325) (2200 2100) (2025) (1950) (1885) (1925 1925) (1825 1825) (1760) (1700 1700) (1575) (985 985 1865 1865 985 1865 1865) (930) (880) (585) (800 800 800) (550 2035) (350 1665) (1315 1315 1315 1315) (170) (865 1805 1805 865) (175) (150) (150) (100) (150) (5690) (5485) (5475) (2625) (2500))) :lvel (quote ((70) (78 74 91) (85) (72) (77) (101 105 96 101 99) (103 101 104 101 100 103) (103) (96 81 75 93) (104) (71) (71 58) (95) (97) (107 61 78) (80) (68) (64 69 73 121) (75) (70) (76) (75) (68) (68) (75) (70) (71) (61) (56) (70) (61) (72) (72) (74) (99) (85) (84 77 75 78) (66) (67) (60) (55) (58) (56) (68) (55) (60) (66) (68) (62 57) (61 52) (70) (66) (75) (69 66) (60 56) (58) (42 35) (37) (59 64 35 24 63 53 46) (41) (81) (97) (59 86 73) (69 55) (59 80) (88 78 57 53) (64) (57 56 46 61) (61) (48) (63) (47) (45) (63) (46) (38) (48) (37))) :loffset (quote ((0) (0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0 0 0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1 1 1) (1) (1) (1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1 1 1 1 1 1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0 0 0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 430 520) nil nil) (om-load-boxinstance "CHORD-SEQ4" (let ((copy (make-instance (quote ominstance) :name "CHORD-SEQ4" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9600) (3600) (2400) (4800) (5000) (5100) (5300) (5500) (5600 5800 5700) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000 8200) (8400) (5800) (6300) (6500) (7500) (8000) (8700) (9400) (9900) (3600) (2400) (5800) (6300) (6500) (7500) (8000) (8700) (9400) (9900) (3600) (2400) (5800) (6300) (6500) (7500) (8000) (8700) (9400) (9900) (3600) (2400) (5800) (6300) (6500) (6700) (7000) (7500) (7200) (7400) (7500) (7700) (7900) (8200) (8400) (8600) (8700) (8900) (9100) (9400 9500) (9900) (9600) (10100) (10600 10700) (10800) (10800) (10600) (10100) (9600) (10300) (9900) (9600) (9500) (9600) (8900) (8700) (8400) (8200) (8000) (7700) (7500) (7200) (7000) (6800) (6500) (6700) (6500) (6300) (6200) (6000) (5800) (5500) (5300) (5100) (5000) (4800) (4300) (3600) (4800) (6500 7200 6000 6700) (4800) (5500) (6000) (5500) (4800) (5500) (6300) (6700) (7000) (7400) (7700) (5100 6100) (6600 7000) (7300) (7700) (8000) (8000 7700) (7500 7300) (7000) (6600 6100) (5100) (7300 7000 4400 5900 6600 5400 5100) (6300) (8500) (8000) (6300 7500 7000) (7700 5900) (5400 7800) (7300 6800 5200 6300) (7100) (6400 5100 6100 7000) (7600) (8200) (8700) (8200) (7600) (7500) (7000) (6400) (6100) (5100) (3900) (4000) (2700) (5100) (5800) (6100) (6400) (7000) (7500) (7600) (8200) (8700) (5100 5900) (6300) (6700 7100) (7500) (7600) (7900) (8200) (8300) (8200) (7900) (7600) (5100) (5600) (5900 6300) (6700) (6800) (7000) (7100) (7300) (7400 7500) (7700) (7900) (8000) (8200) (8300) (8200) (7500) (5100 5500) (5900) (6200) (6700) (7100) (7400) (7900) (8100 8300) (8600) (8300) (8100) (7900) (7900) (9100) (7900) (8100) (8300) (8600 8300) (8100) (7900) (5200 5500) (5700) (5900 6200) (6700) (6600 6900) (7400) (7100) (6900 6600) (6700 6200) (5900) (5700 5500) (5200) (6400 6700) (6900 7100) (7400) (7600 7800) (8100) (8300) (8600) (7800) (7900) (7100) (7400) (7600) (7800) (8100) (8600) (8300) (7400) (7100) (6900) (6700) (6400) (6700) (6900) (7100 7400) (7900) (7800) (8100) (8300 8600) (8300) (8100 7800) (6400 7900) (7900 7800 8100 8300 8600) (5200) (5500) (5700 5900) (6200) (6700 7100) (7400) (7800) (8100) (7800 8100) (7400 7100) (6700) (6200 5900) (5200) (7400 6700 7100 6600) (5200) (5500 5700 5900) (6200 6700) (6600 7100) (7400) (5200) (5500) (5700) (5900 6200) (6700) (6600 7100) (7400) (5200) (7400) (6700) (7200) (6500) (6700) (7100) (7400) (7500) (7600) (7900) (8000) (8200) (8300) (8600) (8700) (8900) (9100) (6700 10300 9100) (10300 6700 9100) (9200 10400 6800) (6500 8900 10100) (8700 9900) (6400) (6000 8400 9600) (8200 5800 9400) (8000 5600 9200) (9100 5500 7900) (5300 7700 8900) (7500 5100 8700) (8600 5000 7400) (4800 7200 8400 8600 7400) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (7900 7000 6000 6500 7500) (4100) (4800) (5300) (5800) (6300) (6500) (7000) (6700) (7200) (7500) (7200) (8200) (7900) (7700) (7400) (3600 4800 5900 6200 6700) (6000 5700) (6300 5500 5800) (6000 5500 5600) (4800) (3600) (5500) (5600 6000 6300) (5500) (5800 6200) (5300) (5800 6200) (5300) (4800 5500) (5800) (6000) (6300) (6700) (7000) (6300 7200) (6300 7200) (7000 6000) (6700 6000) (6300) (6000) (7900 5700) (6400) (6800) (7200) (7700) (7600) (5700) (6400) (6700) (7100) (7400) (5700) (6200) (6600) (6900) (7100) (7400) (7700) (7400) (7500) (7200) (4300) (3600) (4800) (6700) (6300) (6500) (6300) (4200) (5700) (6000) (6300 5100) (6200) (6100) (6000 4300) (5900) (5800) (6000 5000) (6200) (6300) (4500 6500) (6600) (6900) (7400 5400) (6900) (7200) (7400) (7500) (7700) (7900) (7200) (8200) (7900) (7500) (7400) (7500) (7400) (7100) (6900 6600) (6700 6200) (5900) (5700 5500) (5200) (6400 6700) (6900 7100) (7400) (7600 7800) (8100) (8300) (8600) (7800) (7900) (7100) (7400) (7600) (7800) (8100) (8600) (8300) (7400) (7100) (6900) (6700) (6400) (6700) (6900) (7100 7400) (7900) (7800) (8100) (8300 8600) (8300) (8100 7800) (6400 7900) (7900 7800 8100 8300 8600) (5200) (5500) (5700 5900) (6200) (6700 7100) (7400) (7800) (8100) (7800 8100) (7400 7100) (6700) (6200 5900) (5200) (7400 6700 7100 6600) (5200) (5500 5700 5900) (6200 6700) (6600 7100) (7400) (5200) (5500) (5700) (5900 6200) (6700) (6600 7100) (7400) (5200) (7400) (6700) (7200) (6500))) :lonset (quote (0 1190 1425 1855 1950 2025 2090 2175 2250 2365 2450 2525 2605 2665 2750 2800 2865 2950 3025 3100 3150 3225 3350 3925 4025 4100 4200 4315 4400 4600 4800 6430 6575 7150 7250 7325 7425 7540 7625 7825 8025 9655 9800 10375 10475 10575 10675 10790 10875 11075 11275 12905 13050 13625 13725 13825 13925 14000 14105 14180 14275 14375 14425 14525 14625 14705 14800 14875 14940 15025 15125 15215 15400 15550 15650 15750 16490 16675 16775 16890 17025 17130 17190 17290 17350 17490 17590 17695 17800 17865 17965 18050 18150 18230 18325 18405 18500 18575 18660 18760 18840 18910 19015 19080 19180 19260 19360 19435 19560 19950 20185 21525 21685 21860 22060 22185 22285 22350 22450 22510 22610 22685 23785 23910 23985 24060 24125 26010 26110 26175 26235 26360 27935 27990 28920 29800 30135 30385 30585 30935 32250 32420 33285 33460 33610 33760 33860 34010 34125 34225 34385 34510 37010 37885 38490 39610 39700 39800 39885 40035 40105 40235 40340 40440 43115 43185 43310 43435 43525 43610 43685 43760 43825 43925 44010 44725 44785 44835 44900 44985 45060 45135 45185 45265 45385 45435 45500 45560 45635 45700 46735 47535 47635 47685 47755 47835 47910 48035 48110 48255 48335 48410 48485 49260 49385 50335 50385 50460 50565 50700 50775 51615 51675 51760 51860 51920 52085 52150 52210 52310 52410 52490 52585 54110 54160 54225 54285 54410 54460 54510 54585 54660 56575 56660 56775 56860 56975 57110 57250 59085 59210 59310 59385 59485 59585 59685 59760 59935 59985 60085 60165 61075 61135 61235 65635 67950 68035 68090 68155 68235 68285 68385 68435 71335 71410 71475 71575 71710 72685 75600 75660 75760 75860 75965 78585 78635 78685 78735 78825 78885 79010 79230 80440 84365 84685 84910 84990 85090 85165 85265 85345 85405 85505 85590 85665 85740 85815 85865 85965 86380 87015 87260 87515 87740 87790 87955 88190 88415 88615 88790 88990 89190 89390 90590 90765 90865 90965 91065 91165 91245 91340 91415 91490 91565 91640 91715 91785 91865 91940 92015 92080 92555 92990 93615 94270 94495 94715 94865 95040 95390 95605 95805 95990 96180 96340 96540 96715 96840 96965 97515 97940 98730 99130 99615 99765 99890 100040 100190 100340 100465 100610 100765 101265 101420 101540 101680 101815 101940 102115 102340 102500 102640 103015 103160 103640 103735 103865 103970 104075 104190 104290 104415 104515 104730 104835 104940 105045 105165 105365 105490 105590 105665 105765 105865 106115 106440 106545 106740 107455 107540 107620 107715 107790 107895 108015 108115 108220 108320 108395 108495 108610 108715 108815 108915 109015 109115 109230 109315 109415 109530 109615 109665 109730 109815 110030 110290 110490 110590 110665 110745 110840 110905 110965 111065 111165 111245 111340 112865 112915 112980 113040 113165 113215 113265 113340 113415 115330 115415 115530 115615 115730 115865 116005 117840 117965 118065 118140 118240 118340 118440 118515 118690 118740 118840 118920 119830 119890 119990 124390 126705 126790 126845 126910 126990 127040 127140 127190 130090 130165 130230 130330 130465 131440 134355 134415 134515 134615 134720 137340 137390 137440 137490 137580 137640 137765 137985 139195 143120 143440 143665 143890)) :ldur (quote ((1190) (2735) (2500) (170) (140) (65) (160) (190) (115 115 115) (160) (155) (80) (145) (135) (50) (65) (160) (150) (75) (125) (200) (125 700) (575) (2505) (2405) (2330) (115) (285) (200) (200) (1630) (720) (575) (2505) (2405) (2330) (115) (285) (200) (200) (1630) (720) (575) (2530) (2430) (2330) (115) (285) (200) (200) (1630) (720) (575) (4700) (4505) (4405) (180) (105) (75) (195) (100) (50) (200) (100) (80) (95) (140) (65) (185) (190) (90 90) (185) (150) (100) (840 100) (740) (185) (215) (115) (135) (105) (160) (100) (200) (140) (100) (105) (105) (165) (100) (85) (100) (80) (95) (80) (95) (75) (85) (180) (80) (70) (105) (65) (100) (180) (100) (75) (125) (1965) (1575) (1340 1340 1340 1340) (335) (175) (325) (125) (1600) (1500) (1435) (1335) (1275) (1175) (1100) (2325 2325) (2200 2100) (2025) (1950) (1885) (1925 1925) (1825 1825) (1760) (1700 1700) (1575) (985 985 1865 1865 985 1865 1865) (930) (880) (585) (800 800 800) (550 2035) (350 1665) (1315 1315 1315 1315) (170) (865 1805 1805 865) (175) (150) (150) (100) (150) (5690) (5485) (5475) (2625) (2500) (2600) (605) (1120) (3505) (3415) (3315) (150) (70) (130) (105) (100) (2675) (1610 1610) (1540) (125 125) (90) (85) (150) (140) (165) (185) (800) (715) (2810) (1950) (1900 1900) (160) (150) (75) (50) (80) (120 120) (115) (125) (135) (140) (1100) (1035) (800) (4080 4080) (3980) (3930) (80) (75) (125) (220) (145 145) (155) (150) (850) (775) (125) (950) (125) (75) (105) (135 135) (915) (840) (145 245) (185) (160 160) (60) (165 165) (500) (435) (280 280) (180 180) (175) (1620 1620) (1525) (4975 4975) (4925 2415) (2350) (125 175) (175) (200) (150) (1990) (1915) (2510) (2425) (2310) (115) (275) (1975) (1835) (225) (175) (175) (100) (680) (6050) (1550) (1475 1375) (1140) (1090) (990) (910 5470) (4560) (4500 4500) (4400 4400) (2315 2315 2315 2315 2315) (140) (120) (65 145) (80) (3100 3100) (3050) (2950) (2900) (1350 240) (1275 1275) (1210) (4025 4025) (3890) (2915 2915 2915 2915) (365) (2925 2925 2925) (2825 2825) (2725 2725) (2620) (425) (5730) (5680) (5630 5630) (5540) (5480 5480) (220) (1210) (3925) (545) (225) (80) (100) (175) (180) (80) (160) (185) (85) (75) (75) (125) (150) (515) (415) (635 635 635) (245 245 245) (255 255 255) (225 225 225) (215 215) (165) (235 235 235) (225 225 225) (200 200 200) (175 175 175) (200 200 200) (200 200 200) (200 200 200) (1200 1200 1200 1200 1200) (1965) (1790) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (655 655 655 655 655) (445) (220) (150) (175) (350) (215) (200) (185) (190) (160) (200) (175) (125) (125) (550) (2100 2100 425 1215 1215) (790 790) (1160 400 885) (760 760 760) (1650) (2875) (150) (300 150 300) (150) (125 270) (145) (655 655) (655) (1750 155) (120) (140) (135) (300) (175) (225 225) (160 160) (515 140) (520 375) (145) (480) (435 435) (340) (210) (220) (115) (645) (440) (315) (215) (105) (655) (425) (320) (200) (125) (100) (175) (200) (100) (575) (325) (105) (195) (715) (85) (80) (95) (180) (430) (120) (100) (105 105) (100) (75) (100 420) (115) (105) (100 300) (100) (100) (400 100) (115) (85) (215 215) (115) (135) (115) (150) (300) (215) (260) (200) (100) (155) (80) (95) (500) (435) (280 280) (180 180) (175) (1620 1620) (1525) (4975 4975) (4925 2415) (2350) (125 175) (175) (200) (150) (1990) (1915) (2510) (2425) (2310) (115) (275) (1975) (1835) (225) (175) (175) (100) (680) (6050) (1550) (1475 1375) (1140) (1090) (990) (910 5470) (4560) (4500 4500) (4400 4400) (2315 2315 2315 2315 2315) (140) (120) (65 145) (80) (3100 3100) (3050) (2950) (2900) (1350 240) (1275 1275) (1210) (4025 4025) (3890) (2915 2915 2915 2915) (365) (2925 2925 2925) (2825 2825) (2725 2725) (2620) (425) (5730) (5680) (5630 5630) (5540) (5480 5480) (220) (1210) (3925) (545) (225) (80))) :lvel (quote ((97) (103) (100) (44) (55) (76) (73) (78) (72 53 43) (72) (75) (74) (86) (76) (75) (65) (77) (73) (83) (83) (75) (75 83) (97) (81) (75) (72) (89) (81) (82) (91) (97) (104) (101) (74) (75) (72) (89) (81) (82) (91) (97) (104) (101) (74) (79) (83) (89) (81) (82) (91) (97) (104) (101) (74) (79) (83) (75) (77) (76) (77) (76) (89) (90) (75) (78) (85) (74) (79) (80) (73) (81 26) (94) (77) (76) (76 57) (99) (93) (80) (80) (88) (50) (70) (90) (58) (36) (93) (79) (81) (77) (77) (84) (81) (75) (77) (76) (75) (68) (68) (75) (70) (71) (61) (56) (70) (61) (72) (72) (74) (99) (85) (84 77 75 78) (66) (67) (60) (55) (58) (56) (68) (55) (60) (66) (68) (62 57) (61 52) (70) (66) (75) (69 66) (60 56) (58) (42 35) (37) (59 64 35 24 63 53 46) (41) (81) (97) (59 86 73) (69 55) (59 80) (88 78 57 53) (64) (57 56 46 61) (61) (48) (63) (47) (45) (63) (46) (38) (48) (37) (97) (58) (108) (49) (41) (51) (66) (58) (58) (70) (79) (80) (44 40) (55) (42 59) (64) (72) (63) (63) (79) (57) (70) (70) (48) (42) (48 54) (46) (57) (63) (47) (58) (30 72) (70) (72) (65) (65) (80) (74) (63) (25 54) (53) (40) (43) (53) (49) (62) (46 77) (52) (38) (57) (63) (59) (66) (57) (44) (53) (39 19) (32) (49) (42 41) (47) (30 49) (48) (42 54) (33) (9) (41 38) (40 21) (28) (11 40) (40) (22 41) (36 30) (47) (41 59) (64) (51) (49) (65) (65) (12) (30) (23) (38) (40) (49) (44) (40) (23) (25) (54) (54) (44) (39) (27 49) (46) (73) (75) (58 61) (45) (55 57) (54 69) (55 44 42 40 45) (43) (49) (45 42) (64) (58 54) (49) (65) (74) (63 1) (30 36) (55) (22 57) (52) (49 40 37 42) (49) (56 40 49) (44 40) (59 56) (52) (40) (47) (35) (32 56) (44) (45 50) (39) (40) (39) (73) (85) (63) (63) (93) (78) (96) (87) (80) (76) (63) (75) (73) (70) (92) (101) (99 97 100) (103 95 104) (100 99 95) (90 91 97) (89 97) (30) (79 100 85) (93 75 90) (89 79 80) (77 80 92) (83 78 86) (89 79 85) (85 77 85) (100 99 75 80 53) (76) (58) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (79 77 74 75 75) (74) (75) (75) (71) (74) (76) (68) (79) (74) (69) (55) (100) (74) (66) (57) (69 75 97 93 93) (73 76) (86 86 80) (61 46 46) (76) (71) (57) (82 97 80) (52) (79 88) (40) (80 85) (69) (52 53) (59) (74) (60) (74) (77) (77 75) (76 69) (49 69) (74 55) (69) (68) (99 52) (68) (76) (52) (75) (93) (57) (54) (56) (57) (91) (55) (50) (50) (50) (76) (86) (95) (93) (105) (104) (41) (55) (97) (56) (55) (72) (71) (53) (60) (61) (91 62) (81) (75) (81 62) (72) (43) (74 60) (77) (82) (63 78) (71) (68) (97 59) (74) (96) (61) (72) (42) (63) (71) (77) (58) (62) (58) (57) (53) (9) (41 38) (40 21) (28) (11 40) (40) (22 41) (36 30) (47) (41 59) (64) (51) (49) (65) (65) (12) (30) (23) (38) (40) (49) (44) (40) (23) (25) (54) (54) (44) (39) (27 49) (46) (73) (75) (58 61) (45) (55 57) (54 69) (55 44 42 40 45) (43) (49) (45 42) (64) (58 54) (49) (65) (74) (63 1) (30 36) (55) (22 57) (52) (49 40 37 42) (49) (56 40 49) (44 40) (59 56) (52) (40) (47) (35) (32 56) (44) (45 50) (39) (40) (39) (73) (85) (63))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 360 520) nil nil) (om-load-boxinstance "CHORD-SEQ3" (let ((copy (make-instance (quote ominstance) :name "CHORD-SEQ3" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8700) (7800 8000) (6800 5700 6300) (8000) (4600) (8700) (8500) (6300 5600 7700 5800 6100) (8000) (8200) (8400) (8000) (7700) (7500) (7300) (7200) (7000) (6800) (6500) (6300) (6100) (6000) (5800) (5600) (5500) (5300) (5100) (4400) (4300) (5900 6300 5300 7000) (6200) (6300) (6400) (6700) (6800) (7000) (6700) (6800) (4100) (5600) (5300) (6000 6300) (6700) (7200) (7500) (7900) (8200) (8700) (9400) (6800) (6600 5100) (6600) (6800) (6800) (6500) (7500 6100) (7700) (7800 6600 7000) (7700) (7500) (6800 5900 7300 4900 5400) (5600 4700 6300 6800 5100) (4600) (6100 5300 6800 7200) (7500) (7200) (7300) (7500) (7700) (8000) (8400) (8200) (8000) (7700) (7500) (7200) (7000) (7200) (4800 7400) (7600) (7900) (6000 5800) (7400) (7300) (5200) (7600) (6200 5900 5500) (7100) (5200 7000) (6600) (6700 6100 5800) (7000) (4700 7300) (7600) (7400) (6600) (5700 5400) (5700) (6200) (5700) (5600 4000) (4700) (6400 6200) (6500) (6400) (6700) (6900) (7100 7400) (7900) (7800) (8100) (8300 8600) (8300) (8100 7800) (6400 7900) (7900 7800 8100 8300 8600) (5200) (5500) (5700 5900) (6200) (6700 7100) (7400) (7800) (8100) (7800 8100) (7400 7100) (6700) (6200 5900) (5200) (7400 6700 7100 6600) (5200) (5500 5700 5900) (6200 6700) (6600 7100) (7400) (5200) (5500) (5700) (5900 6200) (6700) (6600 7100) (7400) (5200) (7400) (6700) (7200) (6500) (6700) (6300) (6000 5500 5100 4400) (5500 6000 4500 5100) (3800 5400) (6700) (6300 6000 5500 3900) (6000 5400 3800) (5300 3700 6000) (5400) (5300) (5200 3600) (6700) (6300) (6000 5300 5000 4300) (6000 5500 4400 5100) (6000 5500 4500 5100) (5600) (5500) (5400 3800) (6700) (6500) (6300) (6200) (6000) (5800) (5500) (5300) (5100) (5000) (4800) (4300) (3600) (4800) (6500 7200 6000 6700) (4800) (5500) (6000) (5500) (4800) (5500) (6300) (6700) (7000) (7400) (7700) (5100 6100) (6600 7000) (7300) (7700) (8000) (8000 7700) (7500 7300) (7000) (6600 6100) (5100) (7300 7000 4400 5900 6600 5400 5100) (6300) (8500) (8000) (6300 7500 7000) (7700 5900) (5400 7800) (7300 6800 5200 6300) (7100) (6400 5100 6100 7000) (7600) (8200) (8700) (8200) (7600) (7500) (7000) (6400) (6100) (5100) (3900) (4000) (2700) (5100) (5800) (6100) (6400) (7000) (7500) (7600) (8200) (8700) (5100 5900) (6300) (6700 7100) (7500) (7600) (7900) (8200) (8300) (8200) (7900) (7600) (5100) (5600) (5900 6300) (6700) (6800) (7000) (7100) (7300) (7400 7500) (7700) (7900) (8000) (8200) (8300) (8200) (7500) (5100 5500) (5900) (6200) (6700) (7100) (7400) (7900) (8100 8300) (8600) (8300) (8100) (7900) (7900) (9100) (7900) (8100) (8300) (8600) (8300) (8100 7900) (6200) (5900) (5500) (5100) (6700 6900) (7100) (7400) (7100) (6900) (6700) (6200) (5900) (5500) (5100) (7900) (8100) (8300) (8600 8300))) :lonset (quote (0 160 460 910 1260 1510 1635 1790 1955 2050 2150 2235 2335 2435 2510 2585 2685 2750 2840 2935 3030 3130 3225 3305 3405 3505 3580 3680 3745 4180 4720 4805 4885 4980 5055 5120 5205 5305 5480 5680 6935 7030 7170 7255 7355 7430 7970 8205 8445 9180 9330 9505 9605 9805 9905 10280 10405 10560 11135 11280 11655 12475 13230 13305 13405 14045 14180 14310 14405 14525 14660 14785 14905 15005 15120 15255 15380 15480 15535 15675 15780 15875 16060 16180 16310 16410 16475 16610 16810 17015 17135 17335 17450 17585 17750 17960 18160 18285 18410 18460 18685 18890 19010 19170 19335 19435 19535 19610 19785 19835 19935 20015 20925 20985 21085 25485 27800 27885 27940 28005 28085 28135 28235 28285 31185 31260 31325 31425 31560 32535 35450 35510 35610 35710 35815 38435 38485 38535 38585 38675 38735 38860 39080 40290 44215 44535 44760 44840 44940 44990 45540 46180 46815 46880 47455 48065 48430 48630 48730 49890 49940 50005 50590 51245 51545 51765 51880 52440 52540 52615 52715 52795 52865 52970 53035 53135 53215 53315 53390 53515 53905 54140 55480 55640 55815 56015 56140 56240 56305 56405 56465 56565 56640 57740 57865 57940 58015 58080 59965 60065 60130 60190 60315 61890 61945 62875 63755 64090 64340 64540 64890 66205 66375 67240 67415 67565 67715 67815 67965 68080 68180 68340 68465 70965 71840 72445 73565 73655 73755 73840 73990 74060 74190 74295 74395 77070 77140 77265 77390 77480 77565 77640 77715 77780 77880 77965 78680 78740 78790 78855 78940 79015 79090 79140 79220 79340 79390 79455 79515 79590 79655 80690 81490 81590 81640 81710 81790 81865 81990 82065 82210 82290 82365 82440 83215 83340 84290 84340 84415 84515 84565 84640 84765 84815 84865 84955 85940 86040 86145 86215 86265 86330 86415 86465 86530 86630 87065 87115 87190 87290 87390)) :ldur (quote ((160) (750 300) (450 450 450) (350) (250) (125) (155) (1050 1145 260 1145 1050) (195) (185) (185) (100) (100) (150) (175) (100) (155) (90) (95) (95) (100) (95) (180) (100) (100) (175) (165) (500) (975) (540 540 540 540) (165) (80) (95) (140) (150) (185) (275) (1630) (1455) (1255) (2245) (2150 2150) (800) (715) (615) (540) (235) (240) (735) (150) (175 1950) (100) (200) (100) (375) (125 1000) (155) (720 575 1095) (520) (1195) (820 820 820 820 820) (755 755 755 755 755) (2025) (740 1815 740 740) (640) (265) (130) (95) (120) (135) (125) (120) (100) (115) (135) (125) (100) (195) (245 140) (105) (95) (185 185) (120) (230) (100) (65) (135 135 135) (200) (205 205) (120) (200 200 200) (115) (135 135) (165) (210) (1050) (125 125) (125) (275) (225) (325 325) (120) (325 160) (165) (680) (6050) (1550) (1475 1375) (1140) (1090) (990) (910 5470) (4560) (4500 4500) (4400 4400) (2315 2315 2315 2315 2315) (140) (120) (65 145) (80) (3100 3100) (3050) (2950) (2900) (1350 240) (1275 1275) (1210) (4025 4025) (3890) (2915 2915 2915 2915) (365) (2925 2925 2925) (2825 2825) (2725 2725) (2620) (425) (5730) (5680) (5630 5630) (5540) (5480 5480) (220) (1210) (3925) (545) (225) (80) (150) (600) (550 550 550 550) (1275 1275 640 640) (1275 635) (640) (575 575 575 575) (610 610 975) (565 1825 1825) (300) (1260) (1160 1160) (115) (650) (585 585 585 585) (655 655 655 655) (1195 300 520 520) (220) (115) (560 560) (100) (75) (180) (80) (70) (105) (65) (100) (180) (100) (75) (125) (1965) (1575) (1340 1340 1340 1340) (335) (175) (325) (125) (1600) (1500) (1435) (1335) (1275) (1175) (1100) (2325 2325) (2200 2100) (2025) (1950) (1885) (1925 1925) (1825 1825) (1760) (1700 1700) (1575) (985 985 1865 1865 985 1865 1865) (930) (880) (585) (800 800 800) (550 2035) (350 1665) (1315 1315 1315 1315) (170) (865 1805 1805 865) (175) (150) (150) (100) (150) (5690) (5485) (5475) (2625) (2500) (2600) (605) (1120) (3505) (3415) (3315) (150) (70) (130) (105) (100) (2675) (1610 1610) (1540) (125 125) (90) (85) (150) (140) (165) (185) (800) (715) (2810) (1950) (1900 1900) (160) (150) (75) (50) (80) (120 120) (115) (125) (135) (140) (1100) (1035) (800) (3075 3075) (2975) (2925) (80) (75) (125) (220) (145 145) (155) (150) (850) (775) (125) (950) (125) (175) (100) (125) (200) (125 175) (1450) (1400) (1280) (1190) (100 100) (105) (70) (115) (150) (85) (1000) (950) (760) (660) (125) (175) (100) (125 125))) :lvel (quote ((100) (88 45) (87 76 78) (95) (83) (99) (87) (69 59 99 56 75) (75) (96) (92) (89) (90) (79) (79) (76) (78) (77) (75) (66) (72) (76) (72) (70) (72) (45) (61) (75) (65) (93 96 83 99) (69) (76) (81) (91) (81) (78) (90) (101) (62) (73) (47) (36 53) (63) (69) (75) (79) (96) (94) (104) (91) (74 57) (88) (100) (91) (76) (90 68) (88) (87 74 93) (75) (80) (95 70 82 62 59) (63 73 79 80 68) (39) (75 56 80 64) (87) (55) (75) (76) (80) (85) (84) (86) (76) (84) (76) (70) (70) (91) (73 78) (97) (95) (97 89) (100) (97) (73) (96) (92 78 92) (88) (73 80) (64) (72 69 71) (97) (77 104) (95) (96) (96) (81 86) (72) (73) (48) (74 64) (86) (79 81) (77) (75) (44) (39) (27 49) (46) (73) (75) (58 61) (45) (55 57) (54 69) (55 44 42 40 45) (43) (49) (45 42) (64) (58 54) (49) (65) (74) (63 1) (30 36) (55) (22 57) (52) (49 40 37 42) (49) (56 40 49) (44 40) (59 56) (52) (40) (47) (35) (32 56) (44) (45 50) (39) (40) (39) (73) (85) (63) (63) (75) (90 79 79 86) (83 79 70 74) (73 77) (78) (77 93 77 87) (104 107 93) (101 85 95) (83) (58) (76 70) (84) (79) (97 101 91 91) (80 80 81 80) (95 92 75 78) (76) (71) (89 87) (69) (68) (66) (70) (71) (61) (56) (70) (61) (72) (72) (74) (99) (85) (84 77 75 78) (66) (67) (60) (55) (58) (56) (68) (55) (60) (66) (68) (62 57) (61 52) (70) (66) (75) (69 66) (60 56) (58) (42 35) (37) (59 64 35 24 63 53 46) (41) (81) (97) (59 86 73) (69 55) (59 80) (88 78 57 53) (64) (57 56 46 61) (61) (48) (63) (47) (45) (63) (46) (38) (48) (37) (97) (58) (108) (49) (41) (51) (66) (58) (58) (70) (79) (80) (44 40) (55) (42 59) (64) (72) (63) (63) (79) (57) (70) (70) (48) (42) (48 54) (46) (57) (63) (47) (58) (30 72) (70) (72) (65) (65) (80) (74) (63) (25 54) (53) (40) (43) (53) (49) (62) (46 77) (52) (38) (57) (63) (59) (66) (57) (44) (61) (49) (33) (53 55) (36) (45) (35) (41) (15 37) (44) (40) (22) (42) (51) (28) (42) (45) (42) (43) (30) (61) (59 33))) :loffset (quote ((0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0 0 0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0 0 0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0))) :lchan (quote ((1) (1 1) (1 1 1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1 1 1 1 1) (1 1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1) (1) (1 1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1 1 1 1 1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1 1 1) (1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1 1 1) (1 1 1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1 1 1 1 1 1) (1) (1) (1) (1 1 1) (1 1) (1 1) (1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0 0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0 0 0 0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0 0 0 0) (0) (0) (0) (0 0 0) (0 0) (0 0) (0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 280 520) nil nil) (om-load-boxinstance "CHORD-SEQ2" (let ((copy (make-instance (quote ominstance) :name "CHORD-SEQ2" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200) (6700) (6500) (6900) (6700) (6300) (6000) (6400 7400) (7600) (7900) (8800) (9100) (4600 7200 6100 6800 6500 7500) (5300) (9600) (5600) (5800) (6100 6300) (6800) (7300) (7700) (7900) (8000) (8200) (8300) (8200) (7500) (5100 5500) (5900) (6200) (6700) (5500) (6100) (6300) (6300) (6800) (6700) (6600) (6500) (6400) (4600) (5600 6200) (4500) (5500 5900 6100) (4400) (5400 5800 5900 6300) (4300 5300 5800 6200 5700) (6900) (6700) (3900 6500) (5800) (6100) (6300) (5400 4500 6000 6500) (6800) (6800) (7000) (7100) (7300) (7400 7500) (7700) (7900) (8100) (8300) (8600) (8800) (5500) (5900) (6000) (6400) (6900) (6700) (6200) (5700) (5600 4000) (4700) (4000) (4700) (5500 5900 6200 5400) (5300) (4600) (5300) (6100 4600 6500) (6800) (6700 5500) (7900) (8000) (8200) (8400) (8600) (8700) (8900) (9100) (9400 9500) (9900) (9600) (10100) (10600 10700) (10800) (10800) (10600) (10100) (9600) (10300) (9900) (9600) (9500) (9600) (8900) (8700) (8400) (8200) (8000) (7700) (7600) (5700) (6400) (6500) (6900) (7400) (7700 7600 8100) (4500) (3800) (5400 6000 6500) (4500) (6300 5700 6800) (4400) (5600 6200 6700) (4300) (4300) (5900 6500 7000) (3600) (6900 6400 5800) (4100) (5700 6300 6800) (3600) (4100) (5700 6800 6300) (3500) (5700 6300 6800) (3400) (5600 6200 6700) (3400) (3300) (5500 6600 6100) (3300) (3200) (5400 6500 6000) (3200) (3100 3300) (7100 6200 7500 8200 5300 5900) (4300) (3100) (5900) (6200) (4000 6700) (7000) (6700) (6400) (5500) (6200) (6500) (6900) (7400) (7900) (8100 8300) (8600) (8300) (8600) (8700) (8900) (9100) (9400 9500) (9900) (9600) (10100) (10600 10700) (10800) (10800) (10600) (10100) (9600) (10300) (9900) (9600) (9500) (9600) (8900) (8700) (8400) (8200) (8000) (7700) (7500) (7200) (7500) (7400) (7200) (7100) (7400) (7100) (7400) (7300) (7500) (7400) (7000) (7100) (7400) (7500) (6700 6000 6300 7200) (7900 6300 5600 6500 7200 7500) (6900 5500 6500 7200 6000) (6500 5800 5300 6200 6900) (6500 5100 5800 6200 6700 7200) (7000) (6400 5000 6000 6700 5500) (4800) (5500) (6300) (6700) (7000) (6800) (7000) (7200) (7000 4600) (6700) (6200) (6000) (6400) (6700) (7000) (6300 7200) (6300 7200) (7000 6000) (6700 6000) (6300) (6000) (7900 5700) (6400) (6800) (4900 6600) (5800) (6600) (5800 5400 6100 6300 4700) (7000 6500 5400 7500 5900 4900) (6500) (6500 5000 5700 6100) (6600) (4000) (6700 4700) (7100) (7400) (7600 4200 4900) (7300) (6900) (5800 4300 5000 7700) (7400) (7000) (6800) (6500) (6300) (6700) (6800) (7300) (7400 6700 7000 5800 7700 6300 4800) (6500) (7400) (7500) (7200) (7500 7200) (6800 6500) (7000) (6700) (6300) (6000) (6400 7400) (7600) (7900) (8800) (9100) (4600 7200 6100 6800 6500 7500) (5300) (9600) (5600) (5800) (6100 6300) (6800) (7300) (7700) (7900) (8100) (8400) (4300) (3600) (4800) (6900 6400 5800) (7200 6600 6100) (6400 6500) (6600) (6700))) :lonset (quote (0 100 175 455 1125 1175 1240 1300 1425 1475 1725 1950 3400 3450 4240 5300 5350 5415 5515 5575 5650 5700 5765 5825 5900 5965 7000 7800 7900 7950 8020 8100 8245 8325 8560 8645 8745 8880 8985 9130 9230 9430 9655 9730 9855 9955 10410 10635 10855 11055 11210 11375 11530 11670 11830 12030 12130 12205 12255 12335 12455 12505 12570 12655 13030 13205 14485 14660 14720 14805 14855 14920 15005 15055 15280 15485 15605 15700 15835 16220 16335 16460 16560 16775 16915 17055 17155 17205 17285 17380 17455 17520 17605 17705 17795 17980 18130 18230 18330 19070 19255 19355 19470 19605 19710 19770 19870 19930 20070 20170 20275 20380 20445 20545 20660 20760 20885 20985 21100 21235 21760 22560 22735 23310 23710 24065 24325 24610 24885 25935 26235 26835 27260 28035 28610 28910 29060 29225 29635 31075 32135 32910 33160 33290 34185 34400 34560 34885 35100 35260 35860 36410 36560 36950 37050 37150 37300 37425 37525 37625 37900 38025 38140 38275 38400 38475 38620 38700 38775 38850 38915 39000 39100 39190 39375 39525 39625 39725 40465 40650 40750 40865 41000 41105 41165 41265 41325 41465 41565 41670 41775 41840 41940 42055 42190 42315 42415 42475 42580 42705 42825 42950 43070 43200 43295 43360 43445 43520 43620 43930 44375 44830 45300 45750 46025 46205 47125 47300 47420 47515 47600 47700 47750 47815 47900 48000 48115 48195 48265 48490 48615 48790 49015 49175 49315 49690 49835 50315 50410 50540 50645 50840 51075 51275 51975 52295 52620 52770 53320 53450 53625 53795 53930 54100 54245 54420 54645 54825 54920 55000 55095 55190 55275 55350 56790 59325 59475 59575 59625 59705 59825 59950 60000 60050 60115 60175 60300 60350 60600 60825 62275 62325 63115 64175 64225 64290 64390 64450 64525 64590 64675 64755 66505 66775 67175 67595 68580 68890 69050 69175 69300)) :ldur (quote ((100) (1025) (1000) (670) (115) (65) (2160) (2100 175) (300) (250) (225) (1450) (1900 840 1900 840 840 840) (1850) (1060) (1700) (350) (285 1585) (185) (125) (115) (125) (135) (140) (1100) (1035) (800) (300 300) (200) (150) (225) (225) (315) (235) (85) (235) (135) (105) (145) (725) (200) (225 225) (75) (125 125 125) (780) (455 455 455 455) (445 445 225 225 225) (220) (200) (320 320) (320) (155) (140) (360 360 360 360) (200) (175) (75) (50) (80) (120 120) (115) (65) (460) (375) (175) (1280) (435) (260) (200) (115) (150) (85) (275) (225) (325 325) (120) (230) (520) (385 385 500 385) (115) (225) (455) (355 355 355) (140) (140 370) (100) (50) (80) (95) (140) (65) (185) (190) (90 90) (185) (150) (100) (840 100) (740) (185) (215) (115) (135) (105) (160) (100) (200) (140) (100) (105) (105) (165) (100) (115) (325) (1800) (100) (115) (135) (525) (800 800 800) (175) (575) (400 400 400) (615) (260 260 260) (560) (275 275 275) (1050) (1325) (600 600 600) (1775) (775 775 1350) (1025) (300 300 300) (315) (2015) (410 410 410) (2500) (1060 1060 1060) (1025) (250 250 250) (130) (1110) (215 215 215) (160) (540) (215 215 215) (160) (600 600) (550 550 550 550 550 550) (540) (390) (100) (100) (375 150) (125) (100) (100) (515) (125) (115) (260) (125) (220) (145 145) (155) (75) (140) (65) (185) (190) (90 90) (185) (150) (100) (840 100) (740) (185) (215) (115) (135) (105) (160) (100) (200) (140) (100) (105) (105) (165) (100) (115) (135) (125) (100) (165) (105) (125) (120) (125) (120) (130) (95) (65) (85) (175) (100) (310) (445 445 445 445) (455 455 455 455 455 455) (470 470 470 470 470) (450 450 450 450 450) (275 455 455 275 275 275) (180) (920 920 920 920 920) (475) (300) (180) (185) (100) (50) (65) (85) (100 295) (115) (80) (295) (225) (300) (175) (225 225) (160 160) (515 140) (520 375) (145) (480) (330 330) (235) (105) (630 195) (435) (200) (700 700 700 700 700) (645 320 645 645 645 645) (325) (700 700 700 700) (550) (475) (345 345) (170) (135) (170 315 315) (145) (175) (500 405 405 225) (180) (95) (80) (95) (255) (160) (1515) (1440) (2535 2535 2535 2535 2535 2535 2535) (300) (100) (130) (80) (120 120) (125 125) (100) (115) (65) (2160) (2100 175) (300) (250) (225) (1450) (1900 840 1900 840 840 840) (1850) (1060) (350) (300) (300 235) (135) (140) (1980) (1915) (1830) (1750) (670) (1805) (1405) (985 985 985) (745 310 745) (285 160) (275) (150))) :lvel (quote ((69) (72) (37) (1) (38) (79) (68) (44 52) (44) (79) (101) (106) (48 56 44 57 52 56) (55) (87) (42) (32) (41 46) (53) (56) (40) (72) (65) (65) (80) (74) (63) (25 54) (53) (40) (43) (63) (46) (59) (33) (97) (85) (80) (84) (86) (76) (69 62) (52) (63 64 73) (77) (100 101 104 107) (75 73 56 78 68) (92) (91) (65 74) (63) (101) (76) (81 76 72 93) (82) (91) (75) (47) (58) (30 72) (70) (72) (53) (58) (76) (64) (57) (42) (54) (51) (53) (51) (28) (48) (74 64) (86) (79) (96) (95 92 95 90) (97) (79) (86) (78 74 91) (85) (93 83) (97) (73) (57) (85) (74) (79) (80) (73) (81 26) (94) (77) (76) (76 57) (99) (93) (80) (80) (88) (50) (70) (90) (58) (36) (93) (79) (81) (77) (77) (84) (93) (57) (54) (74) (76) (87) (103 101 101) (95) (95) (97 93 96) (93) (97 99 101) (95) (93 85 90) (100) (103) (101 93 104) (106) (91 90 96) (99) (92 95 101) (99) (96) (96 103 97) (103) (77 76 75) (101) (91 87 85) (103) (101) (93 96 100) (96) (108) (105 96 95) (100) (95 92) (110 99 104 105 106 93) (101) (101) (55) (78) (71 86) (82) (78) (54) (60) (99) (92) (76) (34) (62) (46 77) (52) (38) (73) (79) (80) (73) (81 26) (94) (77) (76) (76 57) (99) (93) (80) (80) (88) (50) (70) (90) (58) (36) (93) (79) (81) (77) (77) (84) (76) (70) (80) (67) (69) (83) (83) (87) (83) (97) (76) (53) (55) (81) (78) (80) (44 44 36 62) (57 39 35 42 58 53) (51 41 38 55 40) (56 44 55 42 52) (49 52 44 40 52 44) (59) (70 45 52 55 52) (77) (47) (65) (64) (80) (70) (65) (77) (83 75) (81) (64) (71) (38) (74) (77) (77 75) (76 69) (49 69) (74 55) (69) (68) (99 52) (68) (76) (77 72) (62) (75) (101 105 96 101 99) (103 101 104 101 100 103) (103) (96 81 75 93) (104) (71) (71 58) (95) (97) (107 61 78) (80) (68) (64 69 73 121) (75) (70) (76) (75) (66) (64) (57) (74) (46 49 46 49 53 29 20) (54) (44) (89) (77) (62 50) (65 70) (70) (63) (79) (68) (44 52) (44) (79) (101) (106) (48 56 44 57 52 56) (55) (87) (42) (32) (41 46) (53) (56) (66) (60) (52) (56) (64) (90) (99) (77 76 76) (97 100 83) (70 29) (87) (81))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0 0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1 1 1 1) (1 1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1) (1 1 1) (1) (1 1) (1 1 1 1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1 1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1 1 1) (1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1 1 1) (1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0 0 0) (0 0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 200 520) nil nil) (om-load-boxinstance "CHORD-SEQ1" (let ((copy (make-instance (quote ominstance) :name "CHORD-SEQ1" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6700) (7200) (6500) (7000) (6800) (6700) (5500) (6100) (6300) (6300) (6500) (6300) (6500) (6300) (6500) (6600 5100) (5800) (6100) (6300) (6500) (6300) (6500) (7000) (7200) (7000) (4700 7300) (7600) (7900) (8000) (8200) (8300) (8600) (8800) (8900) (9300) (9500 9600) (9800) (10000 10100) (10300 10500) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (6300 5800 5900 6600) (5000) (4300) (4300) (5900 6500 7000) (3600) (6900 6400 5800) (4100) (5700 6300 6800) (3600) (2900) (3600) (4100) (5700 6800 6300) (3500) (5700 6300 6800) (3400) (3300) (3200) (5400 6500 6000) (3200) (5400 6500 6000) (3200) (5400 6500 6000) (3200) (3100 3300) (7100 6200 7500 8200 5300 5900) (4300) (3600) (2400) (5800) (5500) (5300) (5500 5600 6300 6000) (4700) (4000) (4700) (5500 5900 6200 5400) (5300) (4600) (8700) (8500) (6300 5600 7700 5800 6100) (8000) (8200) (8400) (8000) (7700) (7500) (7300) (7200) (7000) (6800) (6500) (6300) (6500) (7400) (7000) (7200) (6700) (7200) (7000) (7200) (7000) (4700 7300) (7600) (6200 5900 5500) (7100) (7400) (7500) (7400) (7200) (7000) (6700) (6300) (6000) (5800) (6300) (6500) (7500) (7700) (7500) (7700) (7500) (7200) (7000) (7400 7700) (8100 7800) (8000 7700 5400) (7800 8100) (7400 7100) (6700) (6200 5900) (5200) (7400 6700 7100 6600) (5200) (5500) (5700) (5900 6200) (6700) (6600 7100) (7400) (5200) (7400) (6700) (6800) (7000) (5600) (6000) (6200) (6500) (6700) (6300 6000 5500) (3900) (5400 6000 3800) (3700 5300 6000) (5400) (5300 3600) (5200) (5500) (5600) (5800) (6000) (6100) (6300) (6400) (6700) (7000) (7400) (7700) (7500) (6700 6000 6300 7200) (7900 6300 5600 6500 7200 7500) (6900 5500 6500 7200 6000) (6500 5800 5300 6200 6900) (6500 5100 5800 6200 6700 7200) (7000) (6400 5000 6000 6700 5500) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (7900 7000 6000 6500 7500) (4100) (4800) (5300) (5500 5600 6300 6000) (4700) (4000) (6700 4700) (7100) (7400) (7700) (7500) (6700 6000 6300 7200) (7900 6300 5600 6500 7200 7500) (6900 5500 6500 7200 6000) (6500 5800 5300 6200 6900) (6500 5100 5800 6200 6700 7200) (7000) (6400 5000 6000 6700 5500) (4800) (3600) (6200 6700 6000 6500) (4600 6700 6200 6300 7000) (7000 6000 6500 4400) (4300) (3600) (4800) (6700 6200 6300 7000) (4100) (4800) (5600) (6000) (6300 6700) (5000 4300) (5800 6200) (6500) (6900) (7200) (4400 6700 7000 5500) (6300 6000) (6900 5500 4500 6200 6700 6300) (6500 7000 5000) (6000) (6800 5300 5900 6300 7500) (7500) (6700 6000 6300 7200) (7900 6300 5600 6500 7200 7500) (6900 5500 6500 7200 6000) (6500 5800 5300 6200 6900) (6500 5100 5800 6200 6700 7200) (7000) (6400 5000 6000 6700 5500) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (6300 5800 5900 6600) (5000) (4300) (5000) (5300) (5900 6500 7000) (5900) (6200) (6300) (6500))) :lonset (quote (0 215 315 455 535 640 705 805 950 1030 1265 1350 1565 1665 1880 1990 2205 2345 2510 2665 2805 3020 3120 3335 3440 3495 3590 3725 3890 3990 4075 4150 4225 4300 4355 4415 4475 4550 4600 4675 5355 5450 5625 5725 5825 5925 6005 6100 6175 6250 6325 6400 6475 6545 6625 6700 6775 6840 7315 7750 8375 8700 8805 8925 9225 9825 10250 11025 11600 11900 12050 12900 13050 13215 13625 15065 16125 16900 17795 18120 18335 18495 18710 18870 19085 19245 19845 20395 20545 20935 21365 21465 21535 21610 21990 22110 22205 22340 22725 22840 22965 23090 23245 23410 23505 23605 23690 23790 23890 23965 24045 24145 24210 24300 24395 24490 24705 24805 24870 24970 25045 25235 25330 25390 25485 25620 25785 25920 26120 26220 26300 26405 26480 26575 26875 26950 28650 28730 28805 28905 29020 29120 29220 29320 29420 29515 29610 29810 29965 30115 30280 30345 30445 30580 31555 34470 34530 34585 34635 34725 34785 34910 37530 38740 42665 42985 43055 43150 43260 43380 43580 43680 43780 43830 44355 44930 45305 45430 45655 45805 45905 46005 46085 46180 46285 46345 46450 46545 46645 46820 46925 47025 47470 47925 48395 48845 49120 49300 50220 50395 50515 50615 50715 50815 50895 50990 51065 51140 51215 51290 51365 51435 51515 51590 51665 51730 52205 52640 53265 53920 54145 54245 54350 54730 54850 54945 55120 55290 55425 55530 55630 56075 56530 57000 57450 57725 57905 58825 59000 59315 60925 61225 62900 63000 63195 63420 64745 65020 65170 65270 65435 66295 66375 66445 66495 66545 67545 67595 68645 70335 70385 72095 73860 73945 74390 74845 75315 75765 76040 76220 77140 77315 77435 77535 77635 77735 77815 77910 77985 78060 78135 78210 78285 78355 78435 78510 78585 78650 79125 79560 80185 80510 80615 80735 81025 81165 81625 81725 81810 81885 81960)) :ldur (quote ((215) (240) (140) (80) (170) (65) (245) (225) (315) (235) (85) (215) (100) (215) (110) (355) (460 460) (320) (155) (140) (215) (100) (215) (105) (55) (95) (135 135) (265) (185) (85) (75) (75) (75) (55) (60) (60) (75 125) (50) (75 75) (680 680) (1960) (1865) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (430 430 430 430) (105) (120) (1325) (600 600 600) (1775) (775 775 1350) (1025) (300 300 300) (1000) (1000) (315) (2015) (410 410 410) (2500) (1060 1060 1060) (775) (895) (540) (215 215 215) (375) (215 215 215) (375) (215 215 215) (160) (600 600) (550 550 550 550 550 550) (150) (820) (430) (100) (70) (75) (500 500 500 500) (120) (230) (520) (385 385 500 385) (115) (125) (125) (155) (1055 1150 260 1150 1055) (195) (185) (185) (100) (100) (155) (180) (100) (155) (90) (95) (95) (315) (165) (165) (100) (75) (190) (95) (60) (95) (135 135) (165) (135 135 135) (300) (180) (185) (105) (75) (395) (375) (75) (1700) (960) (785) (710) (115) (100) (100) (100) (100) (95) (95) (200 200) (155 155) (150 150 150) (1440 330) (1275 1275) (1210) (4025 4025) (3890) (2915 2915 2915 2915) (440) (8135) (8080) (8030 8030) (7940) (7880 7880) (2620) (1210) (3925) (390) (70) (525) (430) (320) (200) (100) (100) (575 575 575) (525) (575 575 950) (725 375 725) (125) (225 1020) (150) (100) (100) (80) (200) (105) (165) (105) (195) (100) (175) (105) (100) (445 445 445 445) (455 455 455 455 455 455) (470 470 470 470 470) (450 450 450 450 450) (275 455 455 275 275 275) (180) (920 920 920 920 920) (1985) (1810) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (655 655 655 655 655) (325) (100) (105) (500 500 500 500) (120) (440) (345 345) (170) (135) (105) (100) (445 445 445 445) (455 455 455 455 455 455) (470 470 470 470 470) (450 450 450 450 450) (275 455 455 275 275 275) (180) (920 920 920 920 920) (2400) (1925) (1610 1610 1610 1610) (1975 300 300 300 300) (1675 1675 1675 1675) (100) (1745) (1550) (1325 1325 1325 2875) (1550) (1275) (1125) (1025) (860 860) (1250 1250) (1170 1170) (1100) (1050) (3840) (1100 1100 1100 1100) (1050 1050) (1690 1690 1690 1690 1690 1690) (1760 1760 1760) (1710) (1765 1765 1765 1765 1765) (85) (445 445 445 445) (455 455 455 455 455 455) (470 470 470 470 470) (450 450 450 450 450) (275 455 455 275 275 275) (180) (920 920 920 920 920) (1985) (1810) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (430 430 430 430) (105) (410) (430) (140) (460 460 460) (100) (85) (75) (215))) :lvel (quote ((53) (42) (73) (63) (88) (75) (76) (63) (46) (59) (33) (76) (66) (76) (75) (76) (91 79) (80) (101) (76) (76) (75) (76) (88) (91) (78) (77 104) (95) (80) (76) (63) (75) (73) (30) (22) (38) (37 40) (41) (55 53) (54 29) (76) (67) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (96 76 100 86) (92) (78) (103) (101 93 104) (106) (91 90 96) (99) (92 95 101) (99) (96) (99) (96) (96 103 97) (103) (77 76 75) (101) (101) (108) (105 96 95) (100) (105 96 95) (100) (105 96 95) (100) (95 92) (110 99 104 105 106 93) (101) (99) (100) (74) (55) (45) (97 87 89 90) (93) (79) (96) (95 92 95 90) (97) (79) (99) (87) (69 59 99 56 75) (75) (96) (92) (89) (90) (79) (70) (76) (78) (77) (75) (66) (76) (44) (60) (69) (72) (74) (78) (59) (78) (77 104) (95) (92 78 92) (88) (78) (96) (41) (79) (78) (66) (67) (72) (72) (75) (83) (89) (90) (81) (90) (81) (77) (77) (62 79) (115 108) (96 84 78) (91 93) (30 36) (55) (22 57) (52) (49 40 37 42) (49) (49) (35) (32 56) (44) (45 50) (52) (40) (39) (73) (43) (56) (44) (55) (44) (61) (63) (58 93 81) (95) (100 97 95) (103 97 103) (88) (73 84) (96) (85) (76) (74) (80) (75) (80) (78) (91) (80) (97) (78) (76) (44 44 36 62) (57 39 35 42 58 53) (51 41 38 55 40) (56 44 55 42 52) (49 52 44 40 52 44) (59) (70 45 52 55 52) (77) (47) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (79 77 74 75 75) (74) (92) (78) (97 87 89 90) (93) (79) (71 58) (95) (97) (78) (76) (44 44 36 62) (57 39 35 42 58 53) (51 41 38 55 40) (56 44 55 42 52) (49 52 44 40 52 44) (59) (70 45 52 55 52) (77) (79) (83 84 78 72) (70 74 65 57 55) (59 54 53 54) (51) (55) (84) (84 80 75 76) (7) (56) (43) (53) (59 53) (40 22) (32 45) (52) (52) (52) (43 30 17 32) (46 41) (20 27 29 39 32 24) (38 43 33) (20) (41 17 5 33 42) (57) (44 44 36 62) (57 39 35 42 58 53) (51 41 38 55 40) (56 44 55 42 52) (49 52 44 40 52 44) (59) (70 45 52 55 52) (77) (47) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (96 76 100 86) (92) (78) (29) (100) (93 96 97) (99) (70) (79) (76))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1) (1) (1 1 1) (1) (1 1 1) (1) (1 1 1) (1) (1 1) (1 1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1) (1 1) (1) (1 1 1 1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1) (1) (1 1 1) (1 1 1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1 1 1 1) (1 1) (1 1 1 1 1 1) (1 1 1) (1) (1 1 1 1 1) (1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1 1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0) (0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0 0) (0) (0 0 0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0 0 0) (0 0) (0 0 0 0 0 0) (0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil))) (setf (create-info copy) (quote (nil nil))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 130 520) nil nil) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" 10) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 43 117) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 180 9) (om-make-point 127 84) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "CoreaImpro" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 220 200) (om-make-point 32 28) 300 "300" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 271 204) (om-make-point 26 28) 70 "70" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 251 173) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 131 159) (om-make-point 26 28) 10 "10" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 30 371) (om-make-point 548 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7100) (6900) (6700) (6200) (6300) (6500) (6300) (6500) (7000) (4700 7300) (7600) (7900) (8000) (8200) (8300) (8600) (8800) (8900) (9300) (9500 9600) (9800) (10000 10100) (10300 10500) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (7900 7000 6000 6500 7500) (4100) (4800) (5300) (5500 5600 6300 6000) (4700) (4000) (6700 4700) (7100) (7400) (7700) (7500) (6700 6000 6300 7200) (7900 6300 5600 6500 7200 7500) (6900 5500 6500 7200 6000) (6500 5800 5300 6200 6900) (6500 5100 5800 6200 6700 7200) (7000) (6400 5000 6000 6700 5500) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (7900 7000 6000 6500 7500) (4100) (4800) (5300) (5500 5600 6300 6000) (4700) (4000) (6700 4700) (7100) (7400) (7700) (7500) (6700 6000 6300 7200) (7900 6300 5600 6500 7200 7500) (6900 5500 6500 7200 6000) (6500 5800 5300 6200 6900) (6500 5100 5800 6200 6700 7200) (7000) (6400 5000 6000 6700 5500) (4800) (5500) (5800) (6000) (6200) (6300) (6500) (6700) (6800) (7000) (7200) (7400) (7500) (7700) (7900) (8000) (8200) (8000) (4400) (5100) (7900 7000 6000 6500 7500) (4100) (4800) (5300) (5500 5600 6300 6000) (4700) (4000) (4700) (5500 5900 6200 5400) (5300) (4600) (8700) (8500) (6300 5600 7700 5800 6100) (8000) (8200) (8400) (8000) (7700) (7500) (7300) (7200) (7000) (6800) (6500 6700) (6300) (6200 6000) (3600) (4800) (6900 6400 5800) (7200 6600 6100) (6400 6500) (6600) (6700) (6800) (5200) (6400) (6800) (7000) (7200) (7300) (7500 7900) (7900 7500) (7300) (7900 7500) (7300) (7900 7500) (7300) (7200) (7000) (6800) (8100 7800) (8000 7700 5400) (7800 8100) (6100) (6500 7400 7700) (7300 5000 7600) (7400 7700) (6500 6400 5700) (7300 7000) (6900 4600 7200) (7300 7000) (6100 5300) (7000) (6700) (6300) (4600 5700 6200 6000 5300) (6500) (6700) (4800) (6300 6000) (5800 5500) (6300) (6000) (5800) (5500) (5300) (5500 5600 6300 6000) (4700) (4000) (4700) (5500 5900 6200 5400) (5300) (4600) (5300) (6800 6000 6100 6500) (5100) (4400) (5600 6200 6700) (4300) (3100) (5900) (6200) (6300) (6500) (6600 5100) (5800) (6100) (6300) (6500) (6700) (6300) (4600 5700 6200 6000 5300) (6500) (7000) (6800) (6700) (6500) (6700) (6300) (6000 5500 5100 4400) (5500 6000 4500 5100) (3800 5400) (6700) (6300 6000 5500 3900) (6000 5400 3800) (5300 3700 6000) (5400) (5300) (5200 3600) (6700) (6300) (4600 5700 6200 6000 5300) (6500) (6700) (5500) (6100) (6300) (6300) (6500) (6300) (6500) (6300) (6500) (6700) (6800) (4100) (5600) (5300) (5500 5600 6300 6000) (4700) (4000) (4700) (5500 5900 6200 5400) (5300) (4600) (8700) (8500) (6300 5600 7700 5800 6100) (8000) (8200) (8400) (8000) (7700) (7500) (7300) (7200) (7000) (6800) (6500) (6300) (6500) (6700) (5500) (6100) (6300) (6300) (6500) (6300) (6500) (6600 5100) (5800) (6100) (6300) (6500) (6700) (6500) (6300) (6500))) :lonset (quote (0 100 165 250 300 380 595 705 920 1025 1160 1325 1425 1510 1585 1660 1735 1790 1850 1910 1985 2035 2110 2790 2885 3060 3160 3260 3360 3440 3535 3610 3685 3760 3835 3910 3980 4060 4135 4210 4275 4750 5185 5810 6465 6690 6790 6895 7275 7395 7490 7665 7835 7970 8075 8175 8620 9075 9545 9995 10270 10450 11370 11545 11610 11710 11810 11910 11990 12085 12160 12235 12310 12385 12460 12530 12610 12685 12760 12825 13300 13735 14360 15015 15240 15340 15445 15825 15945 16040 16215 16385 16520 16625 16725 17170 17625 18095 18545 18820 19000 19920 20095 20215 20315 20415 20515 20595 20690 20765 20840 20915 20990 21065 21135 21215 21290 21365 21430 21905 22340 22965 23620 23845 23945 24050 24430 24550 24645 24780 25165 25280 25405 25530 25685 25850 25945 26045 26130 26230 26330 26410 26490 26565 26665 26715 26795 26910 27985 28060 28285 29270 29580 29740 29865 30015 30465 30565 30665 30765 30835 30940 31055 31455 31595 31695 31790 31890 31985 32085 32190 32285 32590 32710 32860 33025 33225 33365 33510 33685 33885 33985 34160 34335 34460 34660 34710 34785 35020 35220 35295 35390 35590 35790 35905 36385 36465 36535 36610 36990 37110 37205 37340 37725 37840 37965 38065 38415 38545 38640 38915 39965 40355 40455 40555 40630 40845 40985 41150 41305 41445 41660 41735 41785 42020 42220 42325 42390 42490 42575 42650 42700 43250 43890 44525 44590 45165 45775 46140 46340 46440 47600 47650 47715 47950 48150 48225 48370 48450 48685 48770 48985 49060 49275 49350 49565 49645 49745 49945 51200 51295 51675 51795 51890 52025 52410 52525 52650 52775 52930 53095 53190 53290 53375 53475 53575 53650 53725 53825 53890 53980 54075 54170 54385 54460 54605 54685 54920 55005 55220 55320 55535 55675 55840 55995 56135 56350 56425 56510 56585 56660)) :ldur (quote ((165) (150) (85) (50) (80) (215) (110) (215) (105) (135 135) (265) (185) (85) (75) (75) (75) (55) (60) (60) (75 125) (50) (75 75) (680 680) (1960) (1865) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (655 655 655 655 655) (325) (100) (105) (500 500 500 500) (120) (440) (345 345) (170) (135) (105) (100) (445 445 445 445) (455 455 455 455 455 455) (470 470 470 470 470) (450 450 450 450 450) (275 455 455 275 275 275) (180) (920 920 920 920 920) (1930) (1755) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (655 655 655 655 655) (325) (100) (105) (500 500 500 500) (120) (440) (345 345) (170) (135) (105) (100) (445 445 445 445) (455 455 455 455 455 455) (470 470 470 470 470) (450 450 450 450 450) (275 455 455 275 275 275) (180) (920 920 920 920 920) (1985) (1810) (700) (100) (100) (80) (95) (150) (150) (75) (150) (75) (70) (155) (150) (140) (540) (910) (1060) (625) (655 655 655 655 655) (325) (100) (105) (500 500 500 500) (120) (230) (520) (385 385 500 385) (115) (125) (125) (155) (880 1110 260 1110 1030) (195) (185) (185) (100) (100) (160) (80) (75) (100) (50) (195 80) (115) (1075 1075) (1285) (1210) (985 985 985) (1395 310 3320) (285 160) (275) (600) (550) (2125) (100) (100) (70) (220) (115) (400 400) (140 240) (100) (95 195) (100) (195 195) (205) (105) (400) (305) (120 120) (150 150 150) (165 165) (200) (140 140 140) (145 145 145) (175 175) (200 200 200) (100 100) (175 175 175) (175 175) (125 125) (250) (125) (75) (235 235 235 235 235) (200) (685) (95) (200 200) (200 200) (115) (480) (80) (70) (75) (500 500 500 500) (120) (230) (520) (385 385 500 385) (115) (225) (100) (480 480 480 480) (130) (370) (275 275 275) (1440) (390) (100) (100) (75) (355) (460 460) (320) (155) (140) (215) (125) (50) (235 235 235 235 235) (200) (170) (65) (100) (85) (125) (600) (550 550 550 550) (1275 1275 640 640) (1275 635) (640) (575 575 575 575) (610 610 975) (565 1825 1825) (300) (1260) (1160 1160) (115) (65) (235 235 235 235 235) (200) (220) (225) (315) (235) (85) (215) (75) (215) (75) (215) (180) (1555) (1455) (1255) (95) (500 500 500 500) (120) (230) (520) (385 385 500 385) (115) (125) (125) (155) (1050 1145 260 1145 1050) (195) (185) (185) (100) (100) (150) (175) (100) (155) (90) (95) (95) (215) (220) (225) (315) (235) (85) (215) (100) (355) (460 460) (320) (155) (140) (215) (75) (85) (75) (215))) :lvel (quote ((76) (42) (51) (28) (70) (76) (75) (76) (88) (77 104) (95) (80) (76) (63) (75) (73) (30) (22) (38) (37 40) (41) (55 53) (54 29) (76) (67) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (79 77 74 75 75) (74) (92) (78) (97 87 89 90) (93) (79) (71 58) (95) (97) (78) (76) (44 44 36 62) (57 39 35 42 58 53) (51 41 38 55 40) (56 44 55 42 52) (49 52 44 40 52 44) (59) (70 45 52 55 52) (77) (56) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (79 77 74 75 75) (74) (92) (78) (97 87 89 90) (93) (79) (71 58) (95) (97) (78) (76) (44 44 36 62) (57 39 35 42 58 53) (51 41 38 55 40) (56 44 55 42 52) (49 52 44 40 52 44) (59) (70 45 52 55 52) (77) (47) (59) (59) (59) (69) (68) (60) (70) (43) (66) (65) (73) (75) (70) (75) (81) (66) (70) (74) (79 77 74 75 75) (74) (92) (78) (97 87 89 90) (93) (79) (96) (95 92 95 90) (97) (79) (99) (87) (69 59 99 56 75) (75) (96) (92) (89) (90) (77) (70) (76) (69) (70) (51 40) (64) (52 74) (32) (84) (77 76 76) (97 100 83) (70 29) (87) (81) (95) (63) (70) (75) (76) (73) (79) (91 99) (100 107) (87) (81 81) (87) (81 81) (80) (92) (81) (77) (96 99) (96 84 78) (91 93) (71) (81 100 95) (79 75 70) (90 77) (72 76 83) (91 96) (74 81 78) (80 79) (82 77) (97) (63) (67) (76 64 91 73 57) (74) (68) (72) (75 83) (74 73) (74) (68) (72) (55) (45) (97 87 89 90) (93) (79) (96) (95 92 95 90) (97) (79) (86) (95 101 88 99) (87) (88) (93 85 90) (100) (101) (55) (78) (79) (76) (91 79) (80) (101) (76) (76) (68) (75) (76 64 91 73 57) (74) (88) (82) (76) (68) (68) (75) (90 79 79 86) (83 79 70 74) (73 77) (78) (77 93 77 87) (104 107 93) (101 85 95) (83) (58) (76 70) (84) (79) (76 64 91 73 57) (74) (68) (63) (46) (59) (33) (76) (71) (76) (71) (76) (84) (93) (62) (73) (47) (97 87 89 90) (93) (79) (96) (95 92 95 90) (97) (79) (99) (87) (69 59 99 56 75) (75) (96) (92) (89) (90) (79) (79) (76) (78) (77) (75) (66) (76) (68) (63) (46) (59) (33) (76) (66) (76) (91 79) (80) (101) (76) (76) (68) (68) (71) (76))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1) (1) (1) (1 1 1) (1 1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1) (1 1) (1) (1 1) (1) (1) (1) (1) (1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1) (1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1 1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1) (1) (1 1 1 1) (1 1 1) (1 1 1) (1) (1) (1 1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0) (0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0) (0) (0 0 0 0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 196 305) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0))) (om-make-point 214 240) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 87 189) nil nil nil nil 2))) (quote ((6 0 5 0 nil 0) (12 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (7 0 13 2 nil 0) (9 0 13 4 nil 0) (8 0 13 5 nil 0) (5 0 14 0 nil 0) (10 0 14 1 nil 0))) nil 6.0011))