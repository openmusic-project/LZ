; OM File Header - Saved 2009/06/15 12:03:31
; (6.0011 :patc (om-make-point 153 213) (om-make-point 230 22) (om-make-point 851 731) "No documentation " 183 0 nil "2009/06/15 12:03:31")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/CoreaImpro.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "PST vs LZ" (quote ((om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 237 142) (om-make-point 42 28) 0.001 "0.001" nil) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 296 213) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 618 324) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 558 309) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 538 227) (om-make-point 20 28) 6 "6" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 404 509) (om-make-point 339 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (5200 6000) (6000 6500) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (6400 7200) (6000 6700) (6200 6700) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (5700 6200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (4800 5500) (5800) (5800) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (5200 6000) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (5200 6000) (6000 6500) (6400) (4800 6000) (5200 6000) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (4800 6000) (5200 6000) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2750 2833 2917 3000 3083 3166 3250 3333 3416 3500 3583 4383 4633 4883 5133 5383 5633 5883 6383 6883 6966 7050 7133 7216 7300 7383 7466 7549 7633 7716 7966 8216 8466 8716 9716 10716 10966 11216 11466 11716 12716 13716 13966 14216 14466 14716 15716 16716 16966 17216 17466 17716 18716 19716 19966 20216 20466 20716 21716 22716 22966 23216 23466 23716 24716 25716 25966 26216 26716 27216 27716 27966 28216 28466 28716 28966 29216 29466 29716 29966 30216 30716 31216 31299 31383 31466 31549 31633 31717 31800 31884 31967 32051 32134 32217 32301 32384 32634 32884 33134 33384 34384 35384 35634 35884 36384 36884 37134 37384 38384 38467 38551 38634 38717 38801 38884 38968 39051 39301 39551 39801 40051 41051 42051 42301 42551 43051 43551 44551 44801 45051 45301 45551 46551 47551 47801 48051 48301 48551 48801 49051 49301 49551 49801 50051 51051 51134 51218 51302 51385 51468 51552 51635 51718 52518 52768 53018 53268 53768 54268 54518 54768 55268 55768 56268 56518 56768 57018 57268 57518 57768 58018 58268 58518 58768 59768 59851 59935 60018 60102 60185 60268 61068 61318 61568 61818 62818 63818 64068 64318 64568 64818 65818 66818 67068 67318 67568 67818 68818 69818 70068 70318 70568 70818 71068 71318 71568 71818 72068 72318 72818 73318 73568 73818 74068 74318 75318 76318 76568 76818 77068 77318 77568 77818 78068 78318 78568 78818 79318 79818 80818 81068 81318 81818 82318 82818 83818 84068 84318 84818 85318 85818 86068 86318 86818 87318 87401 87485 87568 87651 87735 87819 87902 87986 88069 88153 88236 88320 88403 88487 88570 88654 88737 88821 88904 88988 89071 89155 89238 89321 89405 89488 89738 89988 90238 90488 91488 92488 92738 92988 93488 93988 94988 95238 95488 95738 95988 96988 97988 98238 98488 98988 99488 99738 99988 100238 100488 101488 102488 102738 102988 103238 103488 103738 103988 104238 104488 104738 104988 105488 105988 106071 106155 106238 106321 106405 106488 106572 106655 106905 107155 107405 107655 108655 109655 109905 110155 110405 110655 111655 112655 112905 113155 113655 114155 114405 114655 114905 115155 115405 115655 115905 116155 116405 116655 117655 117738 117822 117905 117988 118072 118156 118239 118322 119122 119372 119622 119872 120122 120372 121372 121455 121539 121622 121706 121789 121872 121956 122039 122839 123089 123339 123589 123839 124089 125089 125172 125256 125340 125423 125506 125590 125673 125756 125840 125923 126723 126807 126890 127140 127390 127640 127890 128890 129890 130140 130390 130890 131390 131473 131557 131640 131723 131807 131891 131974 132057)) :ldur (quote ((250) (250 250) (250) (750 250) (250) (250) (250) (1416 800) (83) (84) (83) (83) (83) (84) (83) (83) (84) (83) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (583 83) (84) (83) (83) (84) (83) (83) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (918 83) (84) (83) (83) (84) (84) (83) (84) (83) (84) (83) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (250 250) (250 250) (800 800) (417 83) (84) (83) (83) (84) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1417 800) (83) (84) (84) (83) (83) (84) (83) (83) (800 800) (250) (250 250) (250) (400 400) (400 400) (250 250) (250) (500) (400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1250 800) (83) (84) (83) (84) (83) (83) (800 800) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (800 800) (250 250) (250) (400 400) (400 400) (400 400) (800 800) (250 250) (250) (400 400) (400 400) (400 400) (250 250) (250) (400 400) (400 400) (1920 83) (84) (83) (83) (84) (84) (83) (84) (83) (84) (83) (84) (83) (84) (83) (84) (83) (84) (83) (84) (83) (84) (83) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (417 83) (84) (83) (83) (84) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1417 800) (83) (84) (83) (83) (84) (84) (83) (83) (800 800) (250) (750 250) (250) (250) (250) (1250 800) (83) (84) (83) (84) (83) (83) (84) (83) (800 800) (250) (750 250) (250) (250) (250) (1417 800) (83) (84) (84) (83) (83) (84) (83) (83) (84) (83) (800 800) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (400 400) (400 400) (668 83) (84) (83) (83) (84) (84) (83) (84))) :lvel (quoteloffset (quote ((0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (2) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 503 423) (om-make-point 95 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 598 297) (om-make-point 32 28) 500 "500" nil) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0))) (om-make-point 528 356) nil nil nil "lzgenerate" 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))) (list "all_nothing" (quote (quote degenerated))))))) (om-make-point 524 257) nil nil nil nil 2) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 460 59) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 285 318) (om-make-point 44 20) 200 "200" nil) (om-load-boxcall (quote genfun) "PSTGENERATE" (quote pstgenerate) (quote ((om-load-inputfun (quote input-funbox) "A PST" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50))) (om-make-point 223 356) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PSTIFY" (quote pstify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "A float" "PMIN" 0.1) (om-load-inputfun (quote input-funbox) "A float" "A" 0.1) (om-load-inputfun (quote input-funbox) "A float" "YMIN" 0.01) (om-load-inputfun (quote input-funbox) "A float" "R" 2) (om-load-inputfun (quote input-funbox) "An integer" "L" 10) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))) (list "all_nothing" (quote (quote degenerated))))))) (om-make-point 220 257) nil (list nil) "x" nil 1) (om-load-boxcall (quote genfun) "PSTPRINT" (quote pstprint) (quote ((om-load-inputfun (quote input-funbox) "A PST" "TREE" nil))) (om-make-point 165 351) nil nil nil "pstprint" 1) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 415 50) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 173 177) (om-make-point 42 28) 0.001 "0.001" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 272 172) (om-make-point 36 28) 1.01 "1.01" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 61 507) (om-make-point 320 112) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5900 6700) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (4800 6000) (6400) (4800 6000) (5200 6000) (4800 5500) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6000 6700) (6400 7200) (6000 6700) (6200 6700) (5500 6500) (6000 6500) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (4800 5500) (5800) (5800) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800 5500) (5800) (5800) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (6200 6700) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6000 6500) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (4800 5500) (5800) (5800) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (6400 7200) (6000 6700) (6200 6700) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6500) (6500) (6600) (6700) (5900 6700) (5500 6500) (5500 6500) (5200 6000) (4800 5500))) :lonset (quote (0 1000 1083 1167 1250 1333 1416 1499 1582 1832 2082 2582 3082 3332 3582 3666 3749 3832 3916 3999 4499 4749 4999 5999 6999 7249 7499 7749 7999 8249 8499 8749 8999 9249 9499 9999 10499 10749 10999 11499 11999 12499 12749 12999 13249 13499 13749 13999 14249 14499 14749 14999 15999 16082 16166 16249 16333 16416 16666 16916 17416 17916 18416 18666 18916 19166 19416 19666 19916 20166 20416 20666 21666 21749 21833 22116 22199 22283 22366 22449 22532 22615 22699 22782 23032 23282 23532 23782 24782 25782 26032 26282 26532 26782 27032 27282 27532 27782 28032 28282 28782 29282 29532 29782 30282 30782 31282 31532 31782 32032 32282 32532 32782 33032 33282 33532 33782 34782 34865 34949 35032 35115 35198 35281 35364 35447 35530 35613 35696 35779 35862 35945 36028 36111 36194 36277 36360 36444 36527 36610 36694 36777 36861 36944 37028 37111 37195 37278 38078 38328 38578 39578 39661 39745 39828 39911 39995 40078 40328 40578 40828 41078 42078 42878 43128 43378 43628 44628 45628 47428 47928 48428)) :ldur (quote ((800 800) (582 83) (84) (83) (83) (83) (83) (83) (250 250) (250) (400 400) (400 400) (250 250) (417 250) (84) (83) (83) (84) (83) (400 400) (250 250) (250 250) (800 800) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (250 250) (250) (500) (400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1250 800) (83) (84) (83) (84) (83) (250 250) (250) (500) (400) (400 400) (250 250) (250) (250 250) (250 250) (250) (750 250) (250) (250) (250) (1167 800) (83) (84) (83 83) (416 83) (84) (83) (83) (83) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (250 250) (250) (500) (400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (2578 800) (83) (84) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (84) (83) (83) (84) (83) (84) (83) (84) (83) (84) (83) (800 800) (250 250) (250 250) (800 800) (250 83) (84) (83) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (800 800) (250) (250) (250) (800 800) (800 800) (800 800) (400 400) (250 250))) :lvel (quoteloffset (quote ((0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0))) :lchan (quote ((2 1) (2 1) (1) (1) (1) (1) (1) (1) (2 1) (1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (2) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (2) (2 1) (2 1) (1) (2 1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (2 1) (2 1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (2) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 188 431) (om-make-point 95 53) nil nil nil 1) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 5))) (om-make-point 382 87) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 285 1) (om-make-point 92 77) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "CoreaImpro" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil nil)) t nil nil nil))) (quote ((6 0 5 0 nil 0) (8 0 6 0 nil 0) (9 0 8 0 nil 0) (3 0 8 1 nil 0) (7 0 8 2 nil 0) (2 0 8 4 nil 0) (20 0 9 0 nil 0) (4 0 9 1 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (20 0 13 0 nil 0) (16 0 13 1 nil 0) (0 0 13 3 nil 0) (17 0 13 4 nil 0) (1 0 13 5 nil 0) (13 0 14 0 nil 0) (19 0 18 0 nil 0) (12 0 19 0 nil 0) (21 0 20 0 nil 0) (15 0 20 4 nil 0) (10 0 20 5 nil 0))) nil 6.0011))