; OM File Header - Saved 2009/06/15 12:02:52
; (6.0011 :patc (om-make-point 161 27) (om-make-point 214 334) (om-make-point 649 539) "No documentation " 183 0 nil "2009/06/15 12:02:52")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/SATIE.MID"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example2" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 223 192) (om-make-point 20 28) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 340 24) (quote "Let's iterate 5 times the LZ analysis of the original text.") "" (om-make-point 255 122) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 221 122) (om-make-point 20 28) 5 "5" nil) (om-load-boxcomment "comment" (om-make-point 365 39) (quote "We can also prevent stylistic discontinuity by constraining the last (1) generated symbol to belong to the LZ tree of the LZ analysis.") "" (om-make-point 255 181) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 24 366) (om-make-point 531 115) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 3800) (6500) (6700) (5600 6800 5300 6200) (7000) (6800) (6700) (6500) (6700) (6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7400) (7200) (7400) (4300 7000) (7200) (6700 6200 5800) (5700 6500 6900 6000) (7000) (6900) (7000) (6900) (7000) (4000 6700) (7100) (5500 6400 5900) (5500 6400 5900) (4000) (5700 5300 6000) (5900 6400 5500) (7200) (7400) (4300 7000) (7200) (6700 6200 5800) (5700 6500 6900 6000) (7000) (6900) (7000) (6900) (7000) (6800 3800) (6500) (6700) (5600 6800 5300 6200) (7000) (6800))) :lonset (quote (0 464 1096 1248 1417 1550 1683 1827 1920 2116 2293 2447 2609 2736 2887 3103 3259 3475 3829 4239 5289 5608 5813 5979 6157 6308 6545 7260 7852 9739 10381 11421 12477 15909 16077 16235 16589 16999 18049 18368 18606 18772 18950 19101 19283 19747 20379 20575 20744 20877 21010)) :ldur (quote ((464 464) (632) (152) (169 169 169 579) (133) (133) (144) (93) (196) (177 620 620 620) (154) (162) (127) (151) (216) (156) (216) (354 354) (1460) (1050 1050 1050) (524 319 319 319) (205) (166) (178) (151) (237) (715 715) (3121) (1887 1887 1887) (642 642 642) (2096) (1056 1056 1056) (3432 3432 3432) (168) (158) (354 354) (1460) (1050 1050 1050) (557 319 319 319) (238) (166) (178) (151) (182) (464 464) (632) (196) (169 169 169 435) (133) (133))) :lvel (quote ((62 46) (55) (67) (43 60 40 40) (64) (64) (67) (64) (64) (76 40 41 37) (63) (64) (79) (76) (53) (56) (53) (56 56) (63) (20 23 12) (16 18 20 24) (42) (58) (28) (42) (33) (40 37) (24) (23 18 26) (20 13 30) (52) (23 20 34) (16 18 14) (60) (66) (56 56) (63) (20 23 12) (16 18 20 24) (35) (58) (28) (42) (47) (62 46) (55) (64) (43 60 40 40) (64) (64))) :loffset (quote ((0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0))) :lchan (quote ((1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1 1 1) (1 1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 18350450 2621450 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A$$cross-alphabet sequence" "CROSS" nil))) (om-make-point 145 293) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0))) (om-make-point 185 228) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 165 159) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 122 91) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 152 10) (om-make-point 115 68) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "SATIE" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems microplay scale)) (list (quote :midishare) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t) nil nil)) t nil nil nil))) (quote ((5 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (0 0 6 4 nil 0) (8 0 7 0 nil 0) (2 0 7 1 nil 0) (9 0 8 0 nil 0))) nil 6.0011))