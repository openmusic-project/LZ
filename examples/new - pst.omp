; OM File Header - Saved 2009/06/15 12:03:28
; (6.0011 :patc (om-make-point 80 214) (om-make-point 446 78) (om-make-point 631 750) "No documentation " 183 0 nil "2009/06/15 12:03:28")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/CoreaImpro.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "new - pst" (quote ((om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 237 191) (om-make-point 42 28) 0.001 "0.001" nil) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 287 201) (om-make-point 26 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 250 81) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 287 287) (om-make-point 32 28) 200 "200" nil) (om-load-boxcall (quote genfun) "PSTGENERATE" (quote pstgenerate) (quote ((om-load-inputfun (quote input-funbox) "A PST" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50))) (om-make-point 244 332) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PSTIFY" (quote pstify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "A float" "PMIN" 0.1) (om-load-inputfun (quote input-funbox) "A float" "A" 0.1) (om-load-inputfun (quote input-funbox) "A float" "YMIN" 0.01) (om-load-inputfun (quote input-funbox) "A float" "R" 2) (om-load-inputfun (quote input-funbox) "An integer" "L" 10) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))) (list "all_nothing" (quote (quote degenerated))))))) (om-make-point 220 237) nil nil "x" nil 1) (om-load-boxcall (quote genfun) "PSTPRINT" (quote pstprint) (quote ((om-load-inputfun (quote input-funbox) "A PST" "TREE" nil))) (om-make-point 150 299) nil nil nil "pstprint" 1) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 156 67) (om-make-point 32 28) 100 "100" nil) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 219 162) (om-make-point 42 28) 0.001 "0.001" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 265 163) (om-make-point 36 28) 1.01 "1.01" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 67 541) (om-make-point 358 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5800) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6700) (6500) (6000 6400) (6500) (6600) (6700) (5900 6700) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6000 6700) (6400 7200) (5000) (4800) (3600 4800) (6000 6700) (6400 7200) (6000 6700) (6200 6700) (5500 6700) (6500) (6700) (6500) (6700) (6500) (6000 6700) (6400 7200) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (4800 5500) (5800) (5800) (5300) (5000 5700) (4700 5500) (5000) (4800) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (5000) (4800) (3600 4800) (6000 6400) (6500) (6600) (6700) (5900 6700) (6400) (5700 6200) (6000) (5300 6400) (6200) (5500 6000) (5900) (4800 6000) (6400) (4800 6000) (5200 6000) (4800 5500) (5800) (5800) (5300) (5000 5700) (4700 5500) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (4800) (5000) (4800) (4100 5800) (5700) (5500) (5300) (4300 5200) (5000) (5300) (4800 5200) (6000) (4000 5500) (5800) (4100 5800))) :lonset (quote (0 500 1000 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 5000 5083 5167 5250 5333 5416 5500 5583 5666 5749 5999 6249 6499 6749 7799 7882 7966 8049 8133 8216 8299 9099 9182 9265 9348 9431 9514 9597 9680 9763 9846 9929 10012 10095 10178 10261 10344 10427 10511 10594 10844 11094 11344 11594 12594 12677 12761 12844 12927 13011 13094 13594 13844 13927 14010 14810 15160 15410 15660 16660 16743 16827 16910 16993 17077 17160 17660 17910 18094 18594 18844 19094 19344 19594 19844 20094 20344 20594 20844 21094 22094 22177 22261 22344 22427 22510 22593 22676 22760 22843 22926 23726 23976 24226 24726 25226 25726 25976 26059 26143 26393 26643 26893 27143 27393 27643 27893 28143 28393 29393 29476 29560 29643 29727 29810 29893 30693 30943 31193 31443 31693 32693 32943 33193 33443 33693 33943 34193 34443 34693 34943 35443 35943 36193 36443 36943 37443 37943 38193 38443 38693 38943 39193 39443 39693 39943 40193 40443 41443 41526 41610 41693 41777 42177 42427 42677 42927 43927 44010 44093 44343 44593 44843 45093 45343)) :ldur (quote ((500) (400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1416 800) (83) (84) (83) (83) (83) (84) (83) (83) (83) (750 250) (250) (250) (250) (800 800) (83) (84) (83) (84) (83) (83) (800 800) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (83) (84) (83) (750 250) (250) (250) (250) (800 800) (250 83) (84) (83) (83) (84) (83) (400 400) (250 250) (83) (83) (800 800) (250 250) (250 250) (250 250) (800 800) (250 83) (84) (83) (83) (84) (83) (400 400) (250 250) (84) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1582 800) (83) (84) (83) (83) (83) (83) (83) (84) (83) (83) (800 800) (250 250) (250) (500) (400) (400 400) (250 250) (83) (84) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1250 800) (83) (84) (83) (84) (83) (83) (800 800) (750 250) (250) (250) (250) (800 800) (250) (250 250) (250) (250 250) (250) (250 250) (250) (250 250) (250) (400 400) (400 400) (250 250) (250) (500) (400) (400 400) (250 250) (250) (250 250) (250) (250 250) (250) (750 250) (250) (250) (250) (1250 800) (83) (84) (83) (84) (900 400) (250) (250) (250) (1083 800) (83) (83) (250 250) (250) (250 250) (250) (250 250))) :lvel (quoteloffset (quote ((0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0))) :lchan (quote ((1) (2) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (2 1) (1) (1) (1) (1) (1) (2 1) (2 1) (1) (1) (2 1) (2 1) (2 1) (2 1) (2 1) (2 1) (1) (1) (1) (1) (1) (2 1) (2 1) (2) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2 1) (2 1) (1) (1) (2) (2 1) (2 1) (1) (1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (1) (1) (2 1) (2 1) (1) (1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (2 1) (2 1) (1) (1) (2) (2 1) (2 1) (1) (2 1) (1) (2 1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (1) (1) (2 1) (1) (1) (1) (2 1) (1) (1) (2 1) (1) (2 1) (1) (2 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0) (0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0 0) (0 0) (0) (0 0) (0) (0 0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0) (0) (0 0) (0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos microplay scale)) (list (quote :midishare) (quote t) 0 0 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 196 451) (om-make-point 95 53) nil nil nil 1) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 5))) (om-make-point 125 120) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 208 0) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "CoreaImpro" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos microplay scale)) (list (quote :midishare) (quote t) 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) nil nil)) nil nil nil nil))) (quote ((5 0 4 0 nil 0) (3 0 4 1 nil 0) (12 0 5 0 nil 0) (8 0 5 1 nil 0) (0 0 5 3 nil 0) (9 0 5 4 nil 0) (1 0 5 5 nil 0) (5 0 6 0 nil 0) (11 0 10 0 nil 0) (4 0 11 0 nil 0) (13 0 12 0 nil 0) (7 0 12 4 nil 0) (2 0 12 5 nil 0))) nil 6.0011))