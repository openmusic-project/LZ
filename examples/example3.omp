; OM File Header - Saved 2009/06/15 12:02:54
; (6.0011 :patc (om-make-point 229 25) (om-make-point 503 165) (om-make-point 849 595) "No documentation " 183 0 nil "2009/06/15 12:02:54")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/satie.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example3" (quote ((om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 217 230) (om-make-point 32 28) 300 "300" nil) (om-load-boxcomment "comment" (om-make-point 484 46) (quote "<<<<<< If you try severa generation from a same LZ analysis, you can lock this box.$But please note that SAVING OR COPYING A LOCKED LZIFY BOX WILL REQUIRE A LOT OF TIME.") "" (om-make-point 275 166) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 318 56) (quote "Here is the minimum desired complexity.$Higher is this number, less repetitive is the generated sequence.$Try several numbers.") "" (om-make-point 315 244) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 275 237) (om-make-point 26 28) 50 "50" nil) (om-load-boxcomment "comment" (om-make-point 194 28) (quote "Minimum past (see previous example).") "" (om-make-point 298 213) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 257 215) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 331 47) (quote "If you want the generated sequence to look more like the original, you can try to increase the number of iterations.") "" (om-make-point 319 118) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 273 127) (om-make-point 20 28) 6 "6" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 24 402) (om-make-point 651 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7000) (6800 6200 5300 5600) (7000) (4000 6700) (7100) (5500 5900) (5500 5900 6400) (4300) (7400) (7600) (5800 6700 6200) (6500 6000 5700 7200) (7400) (7200) (7400) (4300 7000) (7200) (6200 6700 5800) (5700 6500 6900 6000) (7000) (6900) (7000) (6900) (7000) (4000 6700) (7100) (5500 5900 6400) (5500 6400 5900) (3800) (6500) (6700) (6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7000) (6800 6200 5300 5600) (7000) (6800 3800) (6500) (5300 5600 6200) (5300 5600 6200) (3800) (5500 5900 5200) (5600 5300 6200) (3800) (6500) (6700) (6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7000) (6800 6200 5300 5600) (7000) (6900) (7000) (4000 6700) (7100) (5500 5900 6400) (5500 6400 5900) (3800) (6500) (6700) (6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7000) (6800 6200 5300 5600) (7000) (4000 6700) (7100) (5500 5900 6400) (5500 6400 5900) (3800) (6500) (6700) (6800 5300 6200 5600) (7000) (7200) (7400) (7200) (7000) (6800 6200 5300 5600) (7000) (6800) (7100 4000) (7100) (5500 5900) (5500 5900 6400) (4300) (7400) (7600) (5800 6700 6200) (6500 6000 5700 7200) (7400) (7200) (7400) (4300 7000) (7200) (6200 6700 5800) (5700 6500 6900 6000) (7000) (6900) (7000) (6900) (7000) (4000 6700) (7100) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (5500 6400 5900) (4000) (5700 5300 6000) (5900 6400 5500))) :lonset (quote (0 177 331 493 620 771 906 1055 1191 1906 2498 3735 4250 4511 4858 5254 6260 6564 6766 6934 7092 7446 7954 8713 9014 9219 9385 9547 9698 9918 10633 11225 12759 13411 13776 13972 14168 14345 14499 14661 14788 14939 15074 15223 15359 15823 16455 17764 18321 18894 19626 21321 21651 21860 22056 22233 22387 22549 22676 22827 22962 23111 23247 23398 23635 24350 24942 26464 27116 27481 27677 27873 28050 28204 28366 28493 28644 28779 28928 29064 29779 30371 31905 32557 32922 33131 33327 33504 33658 33820 33947 34098 34233 34382 34518 34753 35324 35600 36837 37352 37613 37960 38356 39362 39666 39868 40036 40194 40562 40972 41731 42032 42237 42403 42581 42732 42952 43448 44040 45927 46569 47211 47853 48495 49137 49779 50421 51063 51705 52347 52989 53631 54273 54915 55557 56199 56841 57483 58125 58767 59409 60051 60693 61335 61977 62619 63261 63903 64545 65187 65829 66471 67113 67755 68397 69039 69681 70323 70965 71607 72249 72891 73533 74175 74817 75459 76101 76743 77385 78027 78669 79311 79953 80595 81237 81879 82521 83163 83805 84447 85089 85731 86373 87015 87657 88299 88941 89583 90225 90867 91509 92151 92793 93435 94077 94719 95361 96003 96645 97287 97929 98571 99213 99855 100497 101139 101781 102423 103065 103707 104349 104991 105633 106275 106917 107559 108201 108843 109485 110127 110769 111411 112053 112695 113337 113979 114621 115263 115905 116547 117189 117831 118473 119115 119757 120399 121041 121683 122325 122967 123609 124251 124893 125535 126177 126819 127461 128103 128745 129387 130029 130671 131313 131955 132597 133239 133881 134523 135165 135807 136449 137091 137733 138375 139017 139659 140301 140943 141585 142227 142869 143511 144153 144795 145437 146079 146721 147363 148005 148647 149289 149931 150573 151215 151857 152499 153141 153783 154425 155067 155709 156351 156993 157635 158277 158919 159561 160203 161243 162299 163355)) :ldur (quote ((177 620 620 620) (154) (162) (127) (151) (135) (149 149 149 149) (136) (715 715) (1829) (1237 1237) (515 515 515) (261) (347) (1402) (1006 1006 1006) (304 304 506 304) (202) (168) (158) (354 354) (1267) (759 759 759) (506 301 301 301) (205) (166) (162) (151) (220) (715 715) (2126) (1534 1534 1534) (652 652 652) (365) (196) (196) (177 620 620 620) (154) (162) (127) (151) (135) (149 149 149 149) (136) (464 464) (2498) (1309 1309 1309) (557 557 557) (3000) (732 732 732) (1695 1695 1695) (330) (209) (196) (177 620 620 620) (154) (162) (127) (151) (135) (149 149 149 149) (136) (151) (237) (715 715) (2114) (1522 1522 1522) (652 652 652) (365) (196) (196) (177 620 620 620) (154) (162) (127) (151) (135) (149 149 149 149) (136) (715 715) (2126) (1534 1534 1534) (652 652 652) (365) (209) (196) (177 620 620 620) (154) (162) (127) (151) (135) (149 149 149 149) (136) (235) (571 571) (1513) (1237 1237) (515 515 515) (261) (347) (1402) (1006 1006 1006) (304 304 506 304) (202) (168) (158) (368 368) (1169) (759 759 759) (506 301 301 301) (205) (166) (178) (151) (220) (496 496) (116755) (1887 1887 1887) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (642 642 642) (2096) (1056 1056 1056) (3432 3432 3432))) :lvel (quote ((76 40 41 37) (63) (64) (79) (76) (68) (56 50 50 47) (62) (40 37) (24) (38 42) (43 37 27) (53) (66) (76) (23 30 41) (27 37 23 45) (56) (60) (66) (56 56) (43) (42 23 16) (27 23 31 40) (42) (58) (47) (42) (47) (40 37) (24) (31 41 21) (25 22 33) (57) (57) (64) (76 40 41 37) (63) (64) (79) (76) (68) (56 50 50 47) (62) (62 46) (55) (22 25 14) (53 48 47) (66) (48 51 42) (40 26 51) (51) (53) (64) (76 40 41 37) (63) (64) (79) (76) (68) (56 50 50 47) (62) (42) (33) (40 37) (24) (42 48 23) (25 22 33) (57) (57) (64) (76 40 41 37) (63) (64) (79) (76) (68) (56 50 50 47) (62) (40 37) (24) (31 41 21) (25 22 33) (57) (53) (64) (76 40 41 37) (63) (64) (79) (76) (68) (56 50 50 47) (62) (55) (68 61) (61) (38 42) (43 37 27) (53) (66) (76) (23 30 41) (27 37 23 45) (56) (60) (66) (29 28) (63) (42 23 16) (27 23 31 40) (42) (58) (28) (42) (47) (55 46) (24) (23 18 26) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (20 13 30) (52) (23 20 34) (16 18 14))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet$$sequence" "CROSS" nil))) (om-make-point 184 329) (om-make-point 95 53) nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0))) (om-make-point 201 264) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 174 157) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil) (om-load-inputfun (quote input-funbox) "An integer, max legato time (ms)" "LEGATIME" nil) (om-load-inputfun (quote input-funbox) "An integer, min arpeggio time (ms)" "ARPEGTIME" 50) (om-load-inputfun (quote input-funbox) "An integer, max release synchro time (ms) (optional)" "RELEASTIME" nil) (om-load-inputfun (quote input-funbox) "An integer, max staccato time (ms) (optional)" "STACCATIME" nil) (om-load-inputfun (quote input-funbox) "An integer (optional)" "TOLTIME" 0))) (om-make-point 107 83) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 208 8) (om-make-point 131 74) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "satie" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) (om-make-point -4 80) (om-make-point 500 280) 0 1000 nil 1 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 nil nil)) t nil nil nil))) (quote ((9 0 8 0 nil 0) (10 0 9 0 nil 0) (11 0 10 0 nil 0) (0 0 10 2 nil 0) (5 0 10 4 nil 0) (3 0 10 5 nil 0) (12 0 11 0 nil 0) (7 0 11 1 nil 0) (13 0 12 0 nil 0))) nil 6.0011))