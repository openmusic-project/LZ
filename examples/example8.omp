; OM File Header - Saved 2009/06/15 12:03:20
; (6.0011 :patc (om-make-point 297 83) (om-make-point 50 50) (om-make-point 698 570) "No documentation " 183 0 nil "2009/06/15 12:03:20")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/JAZZ.MID"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example8" (quote ((om-load-boxcall (quote lispfun) "PITCH_ONLYCHORD" (quote pitch_onlychord) (quote nil) (om-make-point 430 145) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PITCH_NOCHORD" (quote pitch_nochord) (quote nil) (om-make-point 339 144) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 293 112) (om-make-point 26 28) 60 "60" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 214 113) (om-make-point 26 28) 70 "70" nil) (om-load-boxcomment "comment" (om-make-point 388 40) (quote "Link one constraint to the last inlet of the lzgenerate object.") "" (om-make-point 215 255) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "PITCH_AIGU" (quote pitch_aigu) (quote ((om-load-inputfun (quote input-funbox) "SEUIL" "SEUIL" nil))) (om-make-point 265 142) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PITCH_GRAVE" (quote pitch_grave) (quote ((om-load-inputfun (quote input-funbox) "SEUIL" "SEUIL" nil))) (om-make-point 182 143) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 140 233) (om-make-point 26 28) 50 "50" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 117 232) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 134 142) (om-make-point 26 28) 10 "10" nil) (om-load-boxcomment "comment" (om-make-point 315 39) (quote "Some examples of constraints :") "" (om-make-point 170 44) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 24 402) (om-make-point 475 113) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (6600) (5000 6000 5400 5600 6800) (6100) (6700) (6900) (6200 5700 5200 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500) (5200 6200 5700 5500))) :lonset (quote (0 189 352 526 634 765 899 1404 1718 1967 2216 2465 2714 3028 3277 3526 3775)) :ldur (quote ((164) (134) (134 134 134 134 134) (83) (83) (3010) (360 360 400 360) (209 205 207 205) (209 205 207 205) (209 205 207 205) (209 205 207 205) (209 205 207 205) (209 205 207 205) (209 205 207 205) (209 205 207 205) (209 205 207 205))) :lvel (quote ((79) (95) (53 57 55 45 91) (91) (79) (82) (51 57 24 60) (62 57 67 68) (62 57 67 68) (62 57 67 68) (62 57 67 68) (62 57 67 68) (62 57 67 68) (62 57 67 68) (62 57 67 68) (62 57 67 68))) :loffset (quote ((0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 60 333) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil (optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An integer (optional)" "MINCOMPLEX" 0) (om-load-inputfun (quote input-funbox) "A list (optional)" "INCIPIT1" nil) (om-load-inputfun (quote input-funbox) "A list (optional)" "INCIPIT2" nil) (om-load-inputfunmenu1 (quote input-funmenu) "nil or a function name (optional)" "RECONSTR" nil (list (list "default function" nil) (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))) (om-load-inputfunmenu1 (quote input-funmenu) "A function name (optional)" "STRATEGY" (quote randomchoice) (list (list "random choice" (quote (quote randomchoice))) (list "duration : nearest last durations" (quote (quote duration_nearestlast))) (list "duration,etc. : nearest last durations" (quote (quote duration_nearestlast_velocity))))) (om-load-inputfun (quote input-funbox) "A function name (optional)" "CONSTRAINTS" nil))) (om-make-point 77 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote pitch_durationvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 92 169) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a midi-info box" "MIDI-INFO" nil))) (om-make-point 55 92) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 84 12) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "JAZZ" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 nil nil)) t nil nil nil))) (quote ((2 0 5 0 nil 0) (3 0 6 0 nil 0) (12 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (8 0 13 4 nil 0) (7 0 13 5 nil 0) (6 0 13 10 nil 0) (15 0 14 0 nil 0) (9 0 14 1 nil 0) (16 0 15 0 nil 0))) nil 6.0011))