; OM File Header - Saved 2009/06/15 12:03:17
; (6.0011 :patc (om-make-point 229 84) (om-make-point 50 50) (om-make-point 771 696) "No documentation " 183 0 nil "2009/06/15 12:03:17")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/satie.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example7" (quote ((om-load-boxcomment "comment" (om-make-point 232 33) (quote "The options of lzgenerate.") "" (om-make-point 170 13) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 209 34) (quote "Time-coef : you can modify the time scale of the generated sequence.") "" (om-make-point 294 434) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 256 440) (om-make-point 30 28) 1.0 "1.0" nil) (om-load-boxcomment "comment" (om-make-point 381 28) (quote "Equiv2 : How to compare other generated symbol with symbol in the LZ tree.") "" (om-make-point 369 350) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 320 354) (om-make-point 47 28) (quote equal2) "equal2" nil) (om-load-boxcomment "comment" (om-make-point 372 28) (quote "Equiv1 : How to compare last generated symbol with symbol in the LZ tree.") "" (om-make-point 342 318) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 296 321) (om-make-point 41 28) (quote equal) "equal" nil) (om-load-boxcomment "comment" (om-make-point 297 28) (quote "Constraint : you can define your own generation constraint.") "" (om-make-point 301 289) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 278 293) (om-make-point 26 28) nil "nil" nil) (om-load-boxcomment "comment" (om-make-point 462 28) (quote "The next inlet is : Strategy : how to choose a synthesis symbol between several possible ones.") "" (om-make-point 275 258) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 374 42) (quote "The next inlet is : Reconstr : the default function is the selected one by lzify.$But you can choose other functions.") "" (om-make-point 272 220) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 205 28) (quote "Incipit2 : idem for the synthesis symbols.") "" (om-make-point 268 198) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 242 203) (om-make-point 26 28) nil "nil" nil) (om-load-boxcomment "comment" (om-make-point 399 28) (quote "Incipit1 : a user-defined begining of the generated sequence of analysis symbols.") "" (om-make-point 255 171) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 230 178) (om-make-point 26 28) nil "nil" nil) (om-load-boxcomment "comment" (om-make-point 381 28) (quote "Mostprobable: if nil, the most improbable choices become the most probable !") "" (om-make-point 216 110) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 198 111) (om-make-point 18 28) (quote t) "t" nil) (om-load-boxcomment "comment" (om-make-point 208 28) (quote "Length : number of symbols to generate.") "" (om-make-point 211 87) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 182 91) (om-make-point 26 28) 50 "50" nil) (om-load-boxcomment "comment" (om-make-point 440 28) (quote "Maximum past : you can limit the size of the past that defines the context of the analysis.") "" (om-make-point 192 58) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 168 63) (om-make-point 26 28) nil "nil" nil) (om-load-boxcomment "comment" (om-make-point 229 28) (quote "Minimum complexity (see previous examples).") "" (om-make-point 246 152) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 218 157) (om-make-point 26 28) 50 "50" nil) (om-load-boxcomment "comment" (om-make-point 193 25) (quote "Minimum past (see previous examples).") "" (om-make-point 228 134) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 209 140) (om-make-point 20 28) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 70 44) (quote "Number of iterations.$") "" (om-make-point 84 218) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 55 224) (om-make-point 26 28) 10 "10" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 199 530) (om-make-point 324 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (6900) (7000) (4000 6700) (7100) (5500 5900 6400) (6500 6000 5700 6900) (7000) (6900) (7000) (6900) (7000) (6800) (7100 4000) (6500 6000 5700 6900) (7000) (6900) (5700 6400 6100) (5500 5900 6400) (7200) (7400) (7000 4300) (7200) (3800) (4300 7400) (7600) (5800 6700 6200) (7000) (6900) (7000))) :lonset (quote (0 138 256 443 942 1441 4002 4667 5191 5649 6853 8057 9968 13499 135613 191169 234960 270299 270721 270885 270944 271003 271127 593613 718064 733354 751242 860931 960931 1046503 1132075)) :ldur (quote ((138) (118) (187) (499 499) (1863) (1148 1148 1148) (665 665 1189 665) (524) (448) (1204) (1204) (1911) (3531) (5539 5345) (55556 55556 99347 55556) (43791) (35135) (106 106 106) (91 91 91) (59) (59) (124 124) (162) (100000) (15290 15290) (44072) (24886 26184 24886) (100000) (85572) (100000))) :lvel (quote ((64) (94) (66) (55 46) (38) (42 48 30) (19 35 11 29) (37) (47) (47) (55) (33) (55) (68 61) (19 35 11 29) (37) (84) (27 14 17) (43 37 27) (48) (57) (35 48) (48) (66) (31 26) (47) (30 30 41) (64) (94) (66))) :loffset (quote ((0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1) (1 1) (1 1 1 1) (1) (1) (1 1 1) (1 1 1) (1) (1) (1 1) (1) (1) (1 1) (1) (1 1 1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0 0 0) (0 0 0) (0) (0) (0 0) (0) (0) (0 0) (0) (0 0 0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil) (om-load-inputfun (quote input-funbox) "Time scaling coef." "TIME-COEF" 1.0))) (om-make-point 173 470) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ$$continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An$$integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An$$integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil$$(optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "MINCOMPLEX" 0) (om-load-inputfun (quote input-funbox) "A$$list (optional)" "INCIPIT1" nil) (om-load-inputfun (quote input-funbox) "A list$$(optional)" "INCIPIT2" nil) (om-load-inputfunmenu1 (quote input-funmenu) "nil$$or a function (optional)" "RECONSTR" nil (list (list "default function" nil) (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))) (om-load-inputfunmenu1 (quote input-funmenu) "A function (optional)" "STRATEGY" (quote randomchoice) (list (list "random choice" (quote (quote randomchoice))) (list "duration : nearest last
durations" (quote (quote duration_nearestlast))) (list "duration,etc. : nearest last
durations" (quote (quote duration_nearestlast_velocity))))) (om-load-inputfun (quote input-funbox) "A function (optional)" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "A function (optional)" "EQUIV1" nil) (om-load-inputfun (quote input-funbox) "A function (optional)" "EQUIV2" nil))) (om-make-point 157 388) (om-make-point 169 58) nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote newpitch_duration_last_oldpitchvelocity_last) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 34 263) nil nil nil nil 2) (om-load-boxcall (quote genfun) "MIDI->CROSS" (quote midi->cross) (quote ((om-load-inputfun (quote input-funbox) "A list, Output of a$$midi-info box" "MIDI-INFO" nil))) (om-make-point 6 146) nil nil nil nil 1) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 8 52) (om-make-point 95 80) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "satie" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) 0 0 nil nil)) nil nil nil nil))) (quote ((28 0 27 0 nil 0) (29 0 28 0 nil 0) (2 0 28 1 nil 0) (30 0 29 0 nil 0) (20 0 29 1 nil 0) (18 0 29 2 nil 0) (16 0 29 3 nil 0) (24 0 29 4 nil 0) (22 0 29 5 nil 0) (14 0 29 6 nil 0) (12 0 29 7 nil 0) (8 0 29 10 nil 0) (6 0 29 11 nil 0) (4 0 29 12 nil 0) (31 0 30 0 nil 0) (26 0 30 1 nil 0) (32 0 31 0 nil 0))) nil 6.0011))