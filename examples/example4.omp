; OM File Header - Saved 2009/06/15 12:02:58
; (6.0011 :patc (om-make-point 295 27) (om-make-point 50 50) (om-make-point 723 610) "No documentation " 183 0 nil "2009/06/15 12:02:58")
; End File Header
; External resources 
; (list (list (quote :midi) "../../in-files/JUNKO.MID" "../../in-files/JAZZ.MID" "../../in-files/satie.mid"))
(in-package :om)(load-lib-for (quote ("lz")))(setf *om-current-persistent* (om-load-patch1 "example4" (quote ((om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 152 254) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 224 281) (om-make-point 32 28) 300 "300" nil) (om-load-boxcomment "comment" (om-make-point 352 80) (quote "It is possible to analyze a set of several midi files.$This creates a stylistic mixture.") "" (om-make-point 329 14) nil (om-make-color 79/85 8/85 2/17) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 271 7) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "JUNKO" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems microplay scale)) (list (quote :midishare) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t) nil nil)) t nil nil nil) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 211 7) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "JAZZ" :type "MID")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems microplay scale)) (list (quote :midishare) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 218 97) nil nil nil "list" 1) (om-load-boxcall (quote genfun) "LISTMIDI->CROSS" (quote listmidi->cross) (quote ((om-load-inputfun (quote input-funbox) "A$$list of Outputs of midi-info boxes" "MIDIFILES" (list nil)))) (om-make-point 152 136) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 287 281) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 260 266) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 165) (om-make-point 26 28) 10 "10" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no$$documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no$$documentation" "LEGATO" 0))) (om-make-point 24 449) (om-make-point 651 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7400 5100 5600 5400 6100) (6900) (6400) (6300) (6100 5000 5600 5400) (6000) (5600 5000 5400 6100) (6300) (6500 6400) (6600) (5000 6000 5400 5600 6800) (6900) (7000) (7200) (5400 6000 5800 6500 7300) (7500) (7200) (7400 7500) (7900) (7400) (5500 6500 6200 6000) (7400) (7900 7700) (7600) (5700 6700 6200 6400) (7600) (8100) (7800) (6900 5900 6600 6400) (7800) (7300) (8500) (5600 6300 5900 6100 6600) (8000) (7800) (7700) (5500 6200 7500 6500 6000) (7400 7600) (7300) (7200) (6200 6700 6400 7100 5700) (7600) (7100) (6700 6900) (5200 6900 5700 6400) (6200 5900) (7400) (7100) (5200 5900 5700 6200 6400 6900) (6700) (7000) (6500 5000) (6000 5700 5500) (6900) (7000) (5600 6300 6600 6100 5800 6800) (7000) (6800) (4000 7100) (7100) (5500 5900 6400) (5500 6400 5900) (3800) (6500) (6700) (5600 6800 5300 6200) (7000) (6800) (6700) (6500) (6700) (6800 6200 5600 5300) (7000) (6800) (4000 7100) (7100) (5500 5900 6400) (5500 6400 5900) (3800) (6500) (6700) (5600 6800 5300 6200) (7000) (6800) (6700) (6500) (6700) (6800 6200 5600 5300) (7000) (6800) (5400 6300 7000 5900 6000) (5600) (6600) (6800) (5600 6400 5800 5900) (7000) (6600) (6800 5900 5400 6400 5600 5800) (7000) (5500 7100 6000 6500 6200) (6700) (7100) (5500 6200 6500 6000) (5500 6500 6200 6000) (5500 6500 6200 6000) (7200) (6700 6500) (7200) (5600 6300 6600 5800 6100) (7300) (6800) (7300) (5600 6300 6600 6100 5800) (7500) (6900) (7500) (6100 6400 5400 5700 5600 5900) (7500) (8200) (7500 7800) (5600 6100 5400 6400 5900 7100) (7000) (6800 5600 5400 6100 6400 5900) (6700) (6000 5500 6500 6200) (7200) (6900) (7200) (5500 6500 6000 6200) (5600) (5500 5700 6000 5000) (5000 5500 6000 5700 6500) (7000) (6000 5000 5700 5500) (7000) (6800) (7000) (5000 6000 5700 5500) (6700) (6000 5700 5500 5000) (6500) (6700) (5400) (5300 5800 4800) (6000) (6300) (5100 5600 5400 6000) (6100) (6300) (6500) (6800) (5100 5400 5600 6100 6600) (6800) (6900) (7200) (7600) (7900) (7500) (7100 6600 6300 5600 5800 6100) (8200) (8000) (8200) (5500 6200 6000 6500 8300) (7900) (7400) (8300) (8100) (8300) (6100 6300 5600 5800 6600 8500) (8200) (7700) (8400) (8000 8200) (7700) (7500) (7400) (5500 6500 6200 7300 6000) (7200) (7000) (6700) (6800) (6900) (7200) (7600) (7900) (7500) (7100 6600 6300 5600 5800 6100) (8200) (8000) (8200) (5500 6200 6000 6500 8300) (7900) (7400) (8300) (8100) (8300) (6100 6300 5600 5800 6600 8500) (8200) (7700) (8400) (8000 8200) (7700) (7500) (7400) (6500 6200 6000 5500 7300 7400) (7200) (7000) (6900) (7000 5500 6500 6200 6000) (6900) (7000 5500 6500) (6200 6000) (6900) (7000) (5600 6300 6600 6100 5800 6800) (7000) (6800) (4000 7100) (7100) (5500 5900 6400) (5500 6400 5900) (3800) (6500) (6700) (5600 6800 5300 6200) (7000) (6800) (6700) (6500) (6700) (6800 6200 5600 5300) (7000) (6800) (6700) (6500) (6700) (6800 6200 5600 5300) (7000) (6800) (7100 4000) (7100) (5500 5900) (5500 5900 6400) (7100) (4500 6900) (5700 6100 6400) (5700 6400 6100) (4800 7600) (5500) (6000 6400) (6400 5500) (6000) (4300 7400) (7600) (6700) (5800 6200) (5700 6500 7200 6000) (7400) (7200) (7200) (7400) (4300 7000) (7200) (6700 6200 5800) (5700 6500 6900 6000) (7000) (6900) (7000) (6900) (7000) (4000 6700) (7100) (5500 6400 5900) (5500 6400 5900) (4000) (5700 5300 6000) (5900 6400 5500) (7200) (6700) (5500 6000 6500 7000) (6900) (6700) (6900) (6000 5500 6500) (7000) (7200) (7500) (5600 5800 6600 6300 6100 7300) (7500) (7700) (8200) (8000) (8200) (5500 6200 6000 6500 8300) (7900) (7400) (8300) (8100) (8300))) :lonset (quote (0 179 334 508 661 836 988 1154 1338 1503 1665 1843 2001 2180 2343 2465 2667 2840 2980 3159 3303 3482 3653 3846 3988 4145 4317 4517 4668 4840 5002 5208 5374 5521 5714 5892 6036 6210 6380 6567 6721 6879 7051 7237 7375 7559 7614 7695 7882 7975 8197 8347 8520 8571 8645 8833 8981 9221 9379 9539 10073 10375 11897 12549 12914 13110 13316 13485 13618 13751 13895 13988 14140 14268 14412 14638 15172 15474 16996 17648 18013 18209 18415 18584 18717 18850 18994 19087 19239 19367 19511 19737 19787 19913 20066 20182 20262 20461 20599 20790 20956 21174 21314 21497 22025 22594 22731 22968 23110 23258 23429 23654 23791 23936 24127 24326 24454 24641 24711 24965 25139 25313 25476 25660 25815 26003 26168 26372 26513 26699 26980 27212 27851 27935 28195 28297 28561 28689 28872 29017 29244 29401 29610 29696 29946 30313 30452 30653 30839 31034 31180 31275 31328 31520 31697 31852 32005 32199 32385 32574 32752 32924 33114 33421 33626 33826 33987 34183 34359 34539 34735 34952 35088 35282 35429 35623 35789 35974 36157 36330 36487 36699 36837 37038 37191 37385 37571 37760 37938 38110 38300 38607 38812 39012 39173 39369 39545 39725 39921 40138 40274 40468 40615 40809 40975 41160 41337 41510 41645 41838 41980 42176 42227 42323 42514 42617 42857 43015 43175 43709 44011 45533 46185 46550 46746 46942 47111 47244 47377 47521 47614 47766 47894 48038 48264 48408 48501 48653 48781 48925 49151 49722 49998 51235 51750 51940 52733 54040 54830 55752 55804 57556 57609 58515 59004 59534 59593 60631 60963 61183 61536 61704 61926 62294 62802 63852 64171 64409 64575 64753 64911 65131 65846 66354 68241 68883 69923 70979 74411 74566 74780 74980 75202 75343 75582 75976 76135 76228 76335 76544 76745 76944 77307 77547 77854 78059 78259 78420 78616 78792 78968)) :ldur (quote ((179) (155 329 155 155 329) (174) (153) (175) (152 152 152 152) (166) (184 184 184 184) (165) (162 162) (178) (158 158 158 158 158) (179) (163) (122) (202 202 202 202 202) (173) (140) (179 179) (144) (179) (171 171 171 171) (193) (142 142) (157) (172 172 172 172) (200) (151) (172) (162 162 162 162) (206) (166) (340) (193 193 193 193 193) (178) (144) (174) (170 170 170 170 170) (187 187) (154) (158) (172 172 172 172 172) (186) (138) (184 184) (136 55 136 136) (81 81) (187) (93) (222 222 222 222 222 222) (150) (173) (51 51) (262 74 262) (188) (148) (240 240 240 240 240 240) (158) (160) (534 534) (1824) (1522 1522 1522) (652 652 652) (365) (196) (206) (169 169 169 579) (133) (133) (144) (93) (152) (128 128 128 128) (144) (226) (534 534) (1824) (1522 1522 1522) (652 652 652) (365) (196) (206) (169 169 169 579) (133) (133) (144) (93) (152) (128 128 128 128) (144) (226) (50 176 176 176 176) (126) (153) (116) (80 80 279 279) (199) (138) (191 191 191 191 191 191) (166) (218 218 218 218 218) (140) (711) (528 528 528 528) (569 569 569 569) (137 137 137 137) (237) (142 142) (148) (171 171 171 171 171) (225) (137) (145) (191 191 191 191 191) (199) (128) (187) (70 324 324 70 70 324) (254) (174) (174 174) (163 163 163 163 163 163) (184) (155 155 155 155 155 155) (188) (165 165 165 165) (204) (141) (699) (281 281 281 281) (232) (639 639 639 639) (84 84 84 84 84) (260) (102 102 102 102) (264) (128) (183) (145 145 145 145) (227) (157 157 157 157) (209) (336) (250) (367 506 367) (139) (201) (186 186 186 186) (195) (146) (148) (53) (192 192 192 192 192) (177) (155) (153) (194) (186) (189) (178 178 178 178 178 540) (172) (190) (307) (205 205 205 566 205) (200) (161) (196) (176) (180) (743 743 743 549 549 196) (217) (136) (194) (147 147) (194) (166) (185) (183 1411 1217 183 1217) (173) (157) (212) (138) (201) (153) (194) (186) (189) (178 178 178 178 178 540) (172) (190) (307) (205 205 205 566 205) (200) (161) (196) (176) (180) (743 743 743 549 549 196) (217) (136) (194) (147 147) (194) (166) (185) (177 177 177 177 177 177) (173) (135) (193) (142 142 142 142 142) (196) (147 51 51) (96 96) (191) (103) (240 240 240 240 240 240) (158) (160) (534 534) (1824) (1522 1522 1522) (652 652 652) (365) (196) (196) (169 169 169 579) (133) (133) (144) (93) (152) (128 128 128 128) (144) (226) (144) (93) (152) (128 128 128 128) (144) (226) (571 571) (1513) (1237 1237) (515 515 515) (190) (793 2890) (1307 1307 1307) (790 790 790) (922 974) (52) (1752 1752) (959 53) (906) (489 489) (1627) (1097) (1038 1038) (332 332 332 332) (220) (353) (168) (222) (368 368) (1558) (1050 1050 1050) (557 319 319 319) (238) (166) (178) (158) (220) (715 715) (3037) (1887 1887 1887) (642 642 642) (2096) (1056 1056 1056) (3432 3432 3432) (155) (214) (200 200 563 200) (222) (141) (633) (394 394 394) (159) (200) (107) (209 209 209 209 972 209) (201) (199) (363) (240) (307) (205 205 205 566 205) (200) (161) (196) (176) (180))) :lvel (quote ((82) (95 46 60 63 60) (115) (69) (91) (84 48 55 53) (79) (56 46 53 91) (84) (68 55) (95) (53 57 55 45 91) (82) (87) (87) (43 66 61 45 91) (79) (62) (107 35) (84) (111) (58 62 69 64) (99) (66 76) (87) (53 55 62 64) (82) (82) (99) (63 57 61 66) (79) (84) (79) (29 58 67 63 67) (71) (79) (82) (52 66 95 50 61) (50 60) (99) (84) (57 38 55 66 42) (68) (95) (56 58) (60 73 60 40) (38 16) (64) (84) (45 63 61 43 56 68) (64) (95) (24 47) (57 64 62) (79) (95) (10 50 45 56 46 87) (67) (73) (64 56) (64) (42 48 23) (25 22 33) (57) (57) (51) (43 60 40 40) (64) (64) (67) (64) (67) (62 57 53 56) (64) (68) (64 56) (64) (42 48 23) (25 22 33) (57) (57) (51) (43 60 40 40) (64) (64) (67) (64) (67) (62 57 53 56) (64) (68) (40 46 91 46 51) (23) (60) (82) (56 52 38 58) (68) (46) (84 57 46 46 56 42) (68) (53 69 57 57 64) (62) (62) (60 67 61 68) (60 64 67 67) (57 60 64 63) (84) (46 55) (67) (21 48 48 43 46) (107) (61) (79) (38 55 61 51 48) (87) (57) (71) (47 57 48 62 29 48) (30) (87) (79 28) (46 62 56 63 56 82) (95) (87 62 40 52 56 51) (67) (57 63 51 55) (82) (82) (79) (64 56 66 66) (27) (66 63 56 47) (61 63 63 61 66) (91) (58 45 57 58) (84) (76) (91) (56 58 66 63) (69) (60 56 63 43) (69) (79) (12) (66 61 47) (55) (87) (50 61 57 63) (91) (95) (84) (46) (27 57 55 41 103) (91) (87) (87) (66) (82) (82) (84 58 31 43 50 36) (84) (79) (87) (56 64 67 60 76) (82) (63) (103) (82) (68) (58 53 27 55 56 103) (91) (71) (95) (99 34) (67) (95) (67) (41 53 62 82 57) (62) (87) (63) (87) (63) (87) (66) (82) (82) (84 58 31 43 50 36) (84) (79) (87) (56 64 67 60 76) (82) (63) (103) (82) (68) (58 53 27 55 56 103) (91) (71) (95) (99 34) (67) (95) (67) (51 55 64 50 79 64) (64) (84) (84) (79 47 46 63 62) (76) (79 55 56) (67 68) (79) (67) (10 50 45 56 46 87) (67) (73) (64 56) (64) (42 48 23) (25 22 33) (57) (57) (64) (43 60 40 40) (64) (64) (67) (64) (67) (62 57 53 56) (64) (68) (67) (64) (67) (62 57 53 56) (64) (68) (68 61) (61) (38 42) (43 37 27) (56) (43 55) (19 20 6) (27 14 17) (42 34) (23) (21 13) (5 14) (6) (31 26) (47) (8) (11 23) (16 17 47 36) (45) (41) (48) (38) (29 28) (43) (20 23 12) (16 18 20 24) (35) (37) (28) (56) (47) (40 37) (38) (23 18 26) (20 13 30) (52) (23 20 34) (16 18 14) (68) (76) (61 66 66 91) (82) (60) (107) (63 57 73) (82) (84) (35) (45 68 63 61 57 107) (95) (79) (95) (103) (87) (56 64 67 60 76) (82) (63) (103) (82) (68))) :loffset (quote ((0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0 0) (0) (0) (0 0 0 0) (0) (0 0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0) (0) (0) (0 0 0 0 0) (0) (0) (0 0) (0 0 0 0) (0 0) (0) (0) (0 0 0 0 0 0) (0) (0) (0 0) (0 0 0) (0) (0) (0 0 0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0 0) (0 0 0 0 0 0) (0) (0 0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0 0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0) (0) (0 0 0 0 0 0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0 0) (0) (0 0) (0 0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0) (0) (0 0) (0 0 0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0 0) (0) (0 0 0) (0 0 0) (0) (0) (0 0 0 0) (0) (0) (0) (0 0 0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1 1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1 1) (1) (1) (1 1 1 1) (1) (1 1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1 1) (1) (1) (1 1 1 1 1) (1) (1) (1 1) (1 1 1 1) (1 1) (1) (1) (1 1 1 1 1 1) (1) (1) (1 1) (1 1 1) (1) (1) (1 1 1 1 1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1 1 1 1 1) (1) (1 1 1 1 1) (1) (1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1) (1 1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1 1) (1 1 1 1 1 1) (1) (1 1 1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1 1 1) (1 1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1 1 1 1) (1) (1 1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1 1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1 1 1 1 1) (1) (1 1 1) (1 1) (1) (1) (1 1 1 1 1 1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1) (1) (1) (1 1) (1) (1 1) (1 1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1) (1) (1 1) (1 1 1 1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1 1 1) (1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1 1) (1) (1 1 1) (1 1 1) (1) (1) (1 1 1 1) (1) (1) (1) (1 1 1) (1) (1) (1) (1 1 1 1 1 1) (1) (1) (1) (1) (1) (1 1 1 1 1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil nil nil nil) (nil) (nil nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil nil) (nil nil nil nil) (nil nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil nil) (nil nil nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil nil nil nil) (nil nil nil nil) (nil nil nil nil) (nil) (nil nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil nil) (nil nil nil nil nil nil) (nil) (nil nil nil nil nil nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil nil nil nil) (nil nil nil nil nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil) (nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil) (nil nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil nil nil) (nil nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil nil) (nil) (nil nil) (nil nil nil) (nil) (nil nil) (nil nil nil) (nil nil nil) (nil nil) (nil) (nil nil) (nil nil) (nil) (nil nil) (nil) (nil) (nil nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil nil nil) (nil nil nil) (nil) (nil) (nil nil nil nil) (nil) (nil) (nil) (nil nil nil) (nil) (nil) (nil) (nil nil nil nil nil nil) (nil) (nil) (nil) (nil) (nil) (nil nil nil nil nil) (nil) (nil) (nil) (nil) (nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport show-stems microplay scale)) (list (quote :midishare) 0 0 2621450 18350450 0 1000 nil 1 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "CROSS->CHORDSEQ" (quote cross->chordseq) (quote ((om-load-inputfun (quote input-funbox) "A cross-alphabet sequence" "CROSS" nil))) (om-make-point 184 376) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZGENERATE" (quote lzgenerate) (quote ((om-load-inputfun (quote input-funbox) "A LZ$$continuation tree" "DICT" nil) (om-load-inputfun (quote input-funbox) "An$$integer or nil" "MAXPAST" nil) (om-load-inputfun (quote input-funbox) "An$$integer" "LENGTH" 50) (om-load-inputfun (quote input-funbox) "t or nil$$(optional)" "MOSTPROBABLE" (quote t)) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "MINPAST" 0) (om-load-inputfun (quote input-funbox) "An$$integer (optional)" "MINCOMPLEX" 0))) (om-make-point 201 311) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LZIFY" (quote lzify) (quote ((om-load-inputfun (quote input-funbox) "A list of anything" "TEXT" nil) (om-load-inputfun (quote input-funbox) "An integer" "NITER" 1) (om-load-inputfunmenu1 (quote input-funmenu) "A list of 3 functions" "TYPE" (quote newpitch_durationoldpitchvelocity) (list (list "pitch_duration" (quote (quote pitch_duration))) (list "pitch_durationvelocity" (quote (quote pitch_durationvelocity))) (list "pitchduration_nothing" (quote (quote pitchduration_nothing))) (list "pitchduration_velocity" (quote (quote pitchduration_velocity))) (list "newpitch_durationoldpitch" (quote (quote newpitch_durationoldpitch))) (list "newpitch_durationoldpitchvelocity" (quote (quote newpitch_durationoldpitchvelocity))) (list "newpitchduration_oldpitch" (quote (quote newpitchduration_oldpitch))) (list "newpitchduration_oldpitchvelocity" (quote (quote newpitchduration_oldpitchvelocity))) (list "pitch_duration_last" (quote (quote pitch_duration_last))) (list "pitch_durationvelocity_last" (quote (quote pitch_durationvelocity_last))) (list "pitch_duration_last_velocity" (quote (quote pitch_duration_last_velocity))) (list "newpitch_durationoldpitch_last" (quote (quote newpitch_durationoldpitch_last))) (list "newpitch_durationoldpitchvelocity_last" (quote (quote newpitch_durationoldpitchvelocity_last))) (list "newpitch_duration_last_oldpitchvelocity_last" (quote (quote newpitch_duration_last_oldpitchvelocity_last))))))) (om-make-point 212 201) nil nil nil nil 2) (om-load-editor-box1 "midifile" (quote midifile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 150 7) (om-make-point 50 72) (let ((newobj (load-midi (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :name "satie" :type "mid")))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx show-stems microplay scale)) (list (quote :midishare) 0 0 (om-make-point 10 40) (om-make-point 500 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 4 (quote t) nil nil)) t nil nil nil))) (quote ((14 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (11 0 10 0 nil 0) (12 0 11 0 nil 0) (13 0 12 0 nil 0) (0 0 12 1 nil 0) (1 0 12 2 nil 0) (8 0 12 4 nil 0) (7 0 12 5 nil 0) (6 0 13 0 nil 0) (9 0 13 1 nil 0))) nil 6.0011))